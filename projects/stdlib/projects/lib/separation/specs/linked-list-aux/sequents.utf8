
;; variables m : nat;

lemmas

ls-push:
    (o[ls(r, x)] * true)[rs, cf, af(r; o)] ∧ (o0[r => a × r0] * true)[rs, cf, af] ∧ o ≠ o0
  ∧ (o[ls(r0, x0)] * true)[rs, cf, af] 
→ (x = a ' + x0 ↔ true);
used for : ss, lss;

lst-in-hp:
(o[lst(r)] * R)[rs, cf, af] ∧ r ≠ null → r ∈ rs;
used for : ss, lss;

ls-unique:
(o[ls(r, x)] * R)[rs, cf, af] ∧ (o[ls(r, x0)] * R)[rs, cf, af] → (x = x0 ↔ true);
used for : ss, lss;

ls-unique-strng:
(o[ls(r, x)] * R)[rs, cf, af] ∧ (o[ls(r, x0)] * R0)[rs, cf, af] → (x = x0 ↔ true);
used for : ss, lss;



lst-rec:
r ≠ null → lst(r) = _∃ λ x. ls(r, x);
used for : ls;

;;; lst-aux-own:
;;; r ≠ null → (
;;;   (o[lst(r)] * R)[rs, cf, af]
;;; ↔ (o0[lst(r)] * R)[rs, cf, af(r ; o0)] ∧ af(r) = o);

lst-null:
(o[lst(null)])[∅, cf, af];
used for : s;

owner-lst1:
af(r) ≠ o ∧ r ≠ null → ((o[lst(r)] * R)[rs, cf, af] ↔ false);
used for : s;

owner-ls1:
af(r) ≠ o ∧ r ≠ null → ((o[ls(r, x)] * R)[rs, cf, af] ↔ false);
used for : s;


ex-lst-shift:
(o[_∃(xv)] * R)[rs, cf, af] ↔ ∃ x. (o[xv(x)] * R)[rs, cf, af];
used for: s;

ls-null:
ls(null, x) = (emp ∧ ⌜x = []⌝);
used for: s,ls;

ls-one:
ls(r, a ') = (r => a × null);
used for: s,ls;

ls-fold1:
(r => a × r0 * ls(r0, x) * P)(H)
    → (ls(r, a ' + x) * P)(H);
used for: ss;

ls-unfold1:
r ≠ null
⊦ H[r] = ce
  → (    (ls(r, x) * P)(H)
      ↔ ∃ a,y,r0. (r => a × r0 * ls(r0, y) * P)(H) ∧ x = a ' + y);
used for: s;
comment: unfold in antecedent when the list head has already been read by a program;

ls-unfold2:
(ls(r, a ' + x) * P)(H)
    ↔ ∃ r0. (r => a × r0 * ls(r0, x) * P)(H);
used for: as;
comment: unfold in antecedent when the algebraic list is not empty;

precise-ls:
precise(ls(r,x));
used for: s;
