
variables a0, a1, a2, a3, a4, a5 : elem;

lemmas

ext-rec:
s1 = s0 ++ a
  ↔ ∀ b. b ∈ s1 ↔ b = a ∨ b ∈ s0;

subset-insert-same: s ++ a ⊆ s0 ++ a ↔ s ⊆ s0 ++ a; used for : s;

subset-insert : s ⊆ s ++ a ++ a0 ++ a1 ++ a2 ++ a3 ++ a4 ++ a5 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ a0 ++ a1 ++ a2 ++ a3 ++ a4 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ a0 ++ a1 ++ a2 ++ a3 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ a0 ++ a1 ++ a2 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ a0 ++ a1 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ a0 ++ b ++ c; used for : s,ls;
subset-insert : s ⊆ s ++ a ++ b ++ c; used for : s,ls;

size-zero : s = ∅ → # s = 0;

subsize-eq : # s = # s0 → (s ⊆ s0 ↔ s = s0); used for : s,ls;
;;; END
size-three      :  ⊦ # s = 3 ↔ (∃ a, b, c. a ≠ b ∧ a ≠ c ∧ b ≠ c ∧ s = ((∅ ++ a) ++ b) ++ c) ;
equal-add-in: s ++ a = s0 ++ b ∧ a ≠ b → a ∈ s0;
subset-ins : s ++ a ⊆ s0 ++ a ++ b ↔ s ⊆ s0 ++ a ++ b; used for : s,ls;
ins-two : a ∈ s → s ++ b ++ a = s ++ b; used for : s,ls;
sub-size-eq : s ⊆ s0 → (# s0 ≤ # s ↔ s = s0); used for : s,ls;
eq-subset : s = s0 ↔ s ⊆ s0 ∧ s0 ⊆ s;
sub-one : ∅ ++ a ⊆ s ↔ a ∈ s; used for : s,ls;
subset : s ⊆ s ++ a ++ b; used for : s,ls;
sub-insert : s ⊆ s0 → s ⊆ s0 ++ a; used for : s,ls;

sub-insert : ¬ a ∈ s → (s ⊆ s0 ++ a ↔ s ⊆ s0); used for : s,ls;
one-size : ⊦ s = ∅ ++ a → # s = 1; used for : f,lf;
one-in : ⊦ # s = 1 ∧ a ∈ s → s = ∅ ++ a;used for : f,lf;

sub-size      :  ⊦ s ⊆ s0 → ¬ # s0 < # s; used for : s,ls;
size-one-03   :  ⊦ # s = 1 ↔ (∃ a. s = ∅ ++ a) ;

indef		   :  ⊦ a ∈ s ↔ ∃ s0. s = s0 ++ a ∧ ¬ a ∈ s0 ;
add           :  ⊦ ¬ a ∈ s ++ b ↔ a ≠ b ∧ ¬ a ∈ s ;
     used for : s, ls ;
add-01        :  ⊦ (s ++ a) ++ a = s ++ a ;
     used for : s, ls ;
addthree      :  ⊦ (((s ++ a) ++ b) ++ c) ++ a = ((s ++ a) ++ b) ++ c ;
     used for : s, ls ;
addtwo        :  ⊦ ((s ++ a) ++ b) ++ a = (s ++ b) ++ a ;
     used for : s, ls ;
alle          : ∀ a. ¬ a ∈ s ⊦ s = ∅ ;
del           : a ∈ s ⊦ ∃ s0. s = s0 ++ a ∧ ¬ a ∈ s0 ;
eq            :  ⊦ a ∈ s → s ++ a = s ;
     used for : s, ls, lc ;
eq-01         :  ⊦ ¬ a ∈ s ∧ ¬ a ∈ s0 → (s ++ a = s0 ++ a ↔ s = s0) ;
     used for : s, ls ;
eq-02         :  ⊦ ¬ a ∈ s → (s ++ a = ∅ ++ b ↔ a = b ∧ s = ∅) ;
     used for : s, ls ;
eq-03         :  ⊦ s ++ a = s ↔ a ∈ s ;
     used for : s, ls ;
eq-04         :  ⊦ (s ++ b) ++ a = (s ++ a) ++ b ↔ true ;
     used for : s, ls ;
eq-05         :  ⊦ (∅ ++ a) ++ b = (∅ ++ b) ++ a ↔ true ;
eq-06         :  ⊦ (∅ ++ a) ++ b = (∅ ++ b) ++ a ;
eqtwo         :  ⊦ (∅ ++ a) ++ b = (∅ ++ a) ++ c ↔ b = c ;
     used for : s, ls ;
eqtwo-01      :  ⊦ (∅ ++ a) ++ b = (∅ ++ c) ++ b ↔ a = c ;
     used for : s, ls ;
in            :  ⊦ a ∈ s → a ∈ s ++ b ;
     used for : s, ls ;
in-01         :  ⊦ a ∈ s ++ a ;
     used for : s, ls ;
in-02         :  ⊦ a ≠ b → (a ∈ s ++ b ↔ a ∈ s) ;
     used for : s, ls ;
in-03         :  ⊦ ¬ a ∈ s → (a ∈ s ++ b ↔ a = b) ;
     used for : s, ls ;
in-04         :  ⊦ a ∈ ∅ ++ b ↔ a = b ;
     used for : s, ls ;
in-05         :  ⊦ s ++ a = s0 ++ b ∧ a ≠ b → a ∈ s0 ;
     used for : f, lf ;
in-06         :  ⊦ a ∈ s ∧ s = ∅ ++ b → a = b ;
     used for : f, lf ;
ne            :  ⊦ ∅ ≠ s ++ a ;
     used for : s, ls ;
ne-01         :  ⊦ a ∈ s → s ≠ ∅ ;
     used for : f, lf ;
ne-02         :  ⊦ a ∈ s → (s = ∅ ↔ false) ;
     used for : ls ;
one           :  ⊦ (∀ a. a ∈ s → a = b) ∧ s ≠ ∅ → s = ∅ ++ b ;
rax           :  ⊦ a ∈ s ++ b ↔ ¬ ¬ (a = b ∨ a ∈ s) ;
     used for : s, ls ;
sel           :  ⊦ s = ∅ ∨ (∃ a. a ∈ s) ;
selsize       :  ⊦ # s ≠ 0 → (∃ a. a ∈ s) ;
size-exgr     : # s < # s0 ⊦ ∃ a. a ∈ s0 ∧ ¬ a ∈ s ;
size-ins      :  ⊦ # s + 1 = # (s ++ a) ↔ ¬ a ∈ s ;
     used for : s, ls ;
size-less     :  ⊦ ¬ # s + 1 < # (s ++ a) ;
     used for : s, ls ;
size-less-01  :  ⊦ ¬ # (s ++ a) < # s ;
     used for : s, ls ;
size-one      :  ⊦ # s = 1 → (∃ a. s = ∅ ++ a) ;
size-one-01   :  ⊦ # (∅ ++ a) = 1 ;
     used for : s, ls ;
size-one-02   :  ⊦ # s = 1 ∧ a ∈ s ∧ b ∈ s → a = b ;
     used for : f, lf ;
size-three    :  ⊦ 2 < # s → (∃ a, b, c. a ∈ s ∧ b ∈ s ∧ c ∈ s ∧ a ≠ b ∧ a ≠ c ∧ b ≠ c) ;
size-three-01 :  ⊦ a ∈ s ∧ b ∈ s ∧ c ∈ s ∧ a ≠ b ∧ a ≠ c ∧ b ≠ c → 3 ≤ # s ;
size-two      :  ⊦ # s = 2 ↔ (∃ a, b. a ≠ b ∧ s = (∅ ++ a) ++ b) ;
size-two-01   :  ⊦ # ((∅ ++ a) ++ b) = 2 ↔ a ≠ b ;
     used for : s, ls ;
size-two-02   :  ⊦ # ((∅ ++ a) ++ b) ≤ 2 ;
     used for : s, ls ;
size-two-03   : 1 < # s ⊦ ∃ a, b. a ≠ b ∧ a ∈ s ∧ b ∈ s ;
size-two-04   :  ⊦ # s ≠ 0 ∧ # s ≠ 1 ∧ a ∈ s → (∃ b. b ∈ s ∧ a ≠ b) ;
size-two-05   :  ⊦ # s = 2 ↔ (∃ a, b. a ≠ b ∧ s = (∅ ++ a) ++ b ∧ a ∈ s ∧ b ∈ s) ;
size-two-06   :  ⊦ a ∈ s ∧ b ∈ s ∧ a ≠ b → 2 ≤ # s ;
size-zero     :  ⊦ # s ≠ 0 → s ≠ ∅ ;
     used for : f, lf ;
size-zero-01  :  ⊦ s ≠ ∅ → # s ≠ 0 ;
     used for : f, lf ;
size-zero-02  :  ⊦ # s = 0 → s = ∅ ;
     used for : f, lf ;
sizesub       :  ⊦ s ⊆ s0 → # s ≤ # s0 ;
sizesubl      :  ⊦ s ⊆ s0 ∧ a ∈ s0 ∧ ¬ a ∈ s → # s < # s0 ;
sub-add       :  ⊦ a ∈ s0 → (s ++ a ⊆ s0 ↔ s ⊆ s0) ;
     used for : s, ls, lc ;
sub-add-01    :  ⊦ s ⊆ s ++ a ;
     used for : s, ls ;
sub-add-02    :  ⊦ s ++ a ⊆ s0 → s ⊆ s0 ;
     used for : s, ls ;
sub-add-03    :  ⊦ s ++ a ⊆ s0 ↔ s ⊆ s0 ∧ a ∈ s0 ;
     used for : s, ls, lc ;
sub-add-04    :  ⊦ s1 ⊆ s2 → s1 ++ a ⊆ s2 ++ a ;
     used for : s, ls ;
sub-e         :  ⊦ ∅ ⊆ s ;
     used for : s, ls ;
sub-idem      :  ⊦ s ⊆ s ;
     used for : s, ls ;
sub-in        :  ⊦ a ∈ s ∧ s ⊆ s0 → a ∈ s0 ;
     used for : f, lf ;
sub-ntrans    :  ⊦ s ⊆ s0 ∧ ¬ s ⊆ s1 → ¬ s0 ⊆ s1 ;
     used for : f, lf ;
sub-ntrans-01 :  ⊦ s0 ⊆ s1 ∧ ¬ s ⊆ s1 → ¬ s ⊆ s0 ;
     used for : f, lf ;
sub-one       :  ⊦ s ≠ ∅ ∧ # s0 = 1 → (s ⊆ s0 ↔ s = s0) ;
     used for : s, ls ;
sub-one-01    :  ⊦ s ≠ ∅ ++ a → (s ⊆ ∅ ++ a ↔ s = ∅) ;
     used for : s, ls ;
sub-sizeneqex : s ⊆ s0, # s ≠ # s0 ⊦ ∃ a. a ∈ s0 ∧ ¬ a ∈ s ;
sub-trans     :  ⊦ s ⊆ s0 ∧ s0 ⊆ s1 → s ⊆ s1 ;
     used for : f, lf ;
sub-two       :  ⊦ (∅ ++ a) ++ b ⊆ ∅ ++ c ↔ a = b ∧ a = c ;
     used for : s, ls ;
subset-empty  :  ⊦ s ⊆ ∅ ↔ s = ∅ ;
     used for : s, ls ;
subset-equal  :  ⊦ s ⊆ s0 → (s0 ⊆ s ↔ s = s0) ;
     used for : s, ls ;
subsize-eq    :  ⊦ s ⊆ s0 ∧ # s = # s0 → s = s0 ;
sw            :  ⊦ (s ++ b) ++ a = (s ++ a) ++ b ;
sw-01         :  ⊦ ((s ++ a) ++ b) ++ c = ((s ++ c) ++ a) ++ b ;
two           :  ⊦ a ≠ a0 → ((∅ ++ a) ++ b = (∅ ++ a0) ++ c ↔ a = c ∧ b = a0) ;
     used for : s, ls ;
two-01        : a ∈ s, s ≠ ∅ ++ a ⊦ ∃ b. b ∈ s ∧ b ≠ a ;
