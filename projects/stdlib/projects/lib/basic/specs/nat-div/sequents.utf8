lemmas

add              : n ≠ 0 ⊦ (n0 + n) / n = n0 / n + 1 ;
        used for : ls ;
         remarks : proved, used ;
cond             : n ≠ 0 ⊦ m / n * n ≤ m ;
        used for : s ;
         remarks : proved, used, used by proved unit ;
cond-01          : n ≠ 0 ⊦ ¬ m < m / n * n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
div-add          :  ⊦ m0 % n = 0 ∧ 0 ≠ n → (m + m0) / n = m / n + m0 / n ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
div-elim         : n ≠ 0 ⊦ m0 = m / n ∧ n0 = m % n ↔ m = m0 * n + n0 ∧ n0 < n ;
         remarks : proved, used, used by proved unit ;
div-le           :  ⊦ 1 < n → (m ≤ m / n ↔ m = 0) ;
        used for : s, ls ;
         remarks : proved ;
div-le-01        : 1 < n ⊦ m ≤ m / (* n) ↔ m = 0 ;
        used for : s, ls ;
         remarks : proved ;
div-mult         :  ⊦ m ≠ 0 → (m * m0) / m = m0 ;
        used for : s, ls ;
         remarks : proved, used ;
div-one          :  ⊦ m ≠ 0 → 1 / (m + 1) = 0 ;
        used for : s, ls ;
         remarks : proved ;
div-succ         : n ≠ 0 ⊦ m % n + 1 = n → (m + 1) / n = m / n + 1 ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
div-succ-01      : n ≠ 0 ⊦ m % n + 1 ≠ n → (m + 1) / n = m / n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
div-two-add      :  ⊦ m / 2 + n = (m + 2 * n) / 2 ;
         remarks : proved ;
div-two-mult     :  ⊦ m % 2 = 1 → 2 * m / 2 = m - 1 ;
         remarks : proved, used by proved unit ;
exmult           :  ⊦ m % n = 0 ∧ n ≠ 0 → (∃ n0. m = n * n0) ;
         remarks : proved ;
le               : n ≠ 0 ⊦ m ≤ m0 → m / n ≤ m0 / n ;
         remarks : proved, used by proved unit ;
le-01            : n ≠ 0 ⊦ ¬ (n0 + n) / n ≤ n0 / n ;
        used for : s, ls ;
         remarks : proved, used ;
le-div-to-mult   : m0 ≠ 0 ⊦ n ≤ m / m0 ↔ n * m0 ≤ m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
le-succ          : n ≠ 0 ⊦ m / (n + 1) ≤ m / n ;
        used for : s ;
         remarks : proved, used ;
ls               : n ≠ 0, m / n < m / n0 ⊦ n0 < n ;
         remarks : proved, used by proved unit ;
ls-01            : n ≠ 0, m0 ≤ m, n ≤ n0 ⊦ m0 / n0 ≤ m / n ;
         remarks : proved, used by proved unit ;
ls-02            : n ≠ 0 ⊦ m / n < m0 / n → m < m0 ;
        used for : f, lf ;
         remarks : proved, used, used by proved unit ;
ls-03            : n ≠ 0 ⊦ ¬ n0 / n + 1 < (n0 + n) / n ;
        used for : s, ls ;
         remarks : proved, used ;
ls-even          :  ⊦ m % 2 = 0 ∧ n % 2 = 0 → (m / 2 < n / 2 ↔ m < n) ;
        used for : s, ls ;
         remarks : proved, used ;
ls-succ          : n ≠ 0 ⊦ ¬ m / n < m / (n + 1) ;
        used for : s, ls ;
         remarks : proved ;
mod-add          :  ⊦ m0 % n = 0 ∧ 0 ≠ n → (m + m0) % n = m % n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-by6          :  ⊦ (n * (n + 1) * (2 * n + 1)) % 6 = 0 ;
         remarks : proved ;
mod-eq           :  ⊦ m < n → m % n = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-eq-01        :  ⊦ m0 < n ∧ n ≠ 0 → ((m + m0) % n = m0 ↔ m % n = 0) ;
        used for : s, ls ;
         remarks : proved, used ;

;; problem: m0 once without numexpr, once with on lhs of equivalence!         
;;mod-eq-02        : m0 < n, n ≠ 0 ⊦ (m + (* m0)) % (* n) = m0 ↔ m % n = 0 ;
mod-eq-02        : m0 < n, n ≠ 0 ⊦ (m + (* m0)) % (* n) = (* m0) ↔ m % n = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-le           : n ≠ 0 ⊦ m % n ≤ m ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
mod-le-01        : n ≠ 0 ⊦ m % n ≤ m + m0 ;
        used for : s, ls ;
         remarks : proved ;
mod-le-02        : n ≠ 0 ⊦ m % n ≤ n ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
mod-le-03        : n ≠ 0 ⊦ ¬ n ≤ m % n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-le-04        :  ⊦ n ≠ 0 → (m ≤ m % n ↔ m < n) ;
        used for : s, ls ;
         remarks : proved ;
mod-ls           : n ≠ 0 ⊦ m % n < n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-ls-01        : n ≠ 0 ⊦ ¬ m < m % n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-ls-02        : n ≠ 0 ⊦ ¬ m + m0 < m % n ;
        used for : s, ls ;
         remarks : proved, used ;
mod-ls-03        : n ≠ 0 ⊦ ¬ n < m % n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-mod          :  ⊦ m % n = 0 ∧ n % n0 = 0 ∧ n ≠ 0 ∧ n0 ≠ 0 → m % n0 = 0 ;
        used for : s, ls ;
         remarks : proved ;
mod-mod-01       :  ⊦ m % (n + 1) = 0 ∧ (n + 1) % n0 = 0 ∧ n0 ≠ 0 → m % n0 = 0 ;
        used for : s, ls ;
         remarks : proved ;
mod-mult         : n ≠ 0 ⊦ (m + n0 * n) % n = m % n ;
        used for : s ;
         remarks : proved, used, used by proved unit ;
mod-mult-01      : n ≠ 0 ⊦ (m * n) % n = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-neq          : n ≠ 0 ⊦ m % n < (m + 1) % n ↔ (m + 1) % n ≠ 0 ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
mod-nls          :  ⊦ n ≠ 0 ∧ n ≤ n0 + 1 → ¬ n0 < m % n ;
         remarks : proved, used by proved unit ;
mod-once         : n ≠ 0 ⊦ (m + n) % n = m % n ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-one          :  ⊦ m % 1 = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
mod-one-01       :  ⊦ n ≠ 0 ∧ n ≠ 1 → 1 % n = 1 ;
        used for : s, ls ;
         remarks : proved, used ;
mod-rec          : n ≠ 0 ⊦ n ≤ m → m % n = (m - n) % n ;
         remarks : proved, used by proved unit ;
mod-rew          :  ⊦ n ≠ 0 → m % n = m - m / n * n ;
         remarks : proved, used by proved unit ;
mod-same         : n ≠ 0 ⊦ m % n ≠ n ;
        used for : s, ls ;
         remarks : proved ;
mod-succ         :  ⊦ m % n + 1 = n → (m + 1) % n = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-succ-01      : n ≠ 0 ⊦ m % n + 1 ≠ n → (m + 1) % n = m % n + 1 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-succ-02      : n ≠ 0 ⊦ (m + 1) % n = 0 → m % n = n - 1 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod-succ-03      :  ⊦ 1 ≠ n ∧ n ≠ 0 → (n + 1) % n = 1 ;
        used for : s, ls ;
         remarks : proved ;
mod-succ-04      : n ≠ 0 ⊦ (m + 1) % n < m % n ↔ (m + 1) % n = 0 ∧ n ≠ 1 ;
        used for : s, ls ;
         remarks : proved ;
mod-succ-05      : n ≠ 0 ⊦ m % n < m0 → ¬ m0 < (m + 1) % n ;
        used for : s, ls ;
         remarks : proved ;
mod-succ-06      : n ≠ 0 ⊦ (m + 1) % n ≠ 0 → (m + 1) % n = m % n + 1 ;
        used for : s, ls ;
         remarks : proved, used ;
mod-zero         : n ≠ 0 ⊦ n % n = 0 ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
mod-zero-01      :  ⊦ m ≠ 0 → 0 % m = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mod2-succ        :  ⊦ (m + 1) % 2 = 0 ↔ m % 2 ≠ 0 ;
        used for : ss, lss ;
         remarks : proved, used ;
modex            :  ⊦ n ≠ 0 → (m % n = 0 ↔ (∃ n0. m = n0 * n)) ;
         remarks : proved, used, used by proved unit ;
mult             : n ≠ 0 ⊦ (n0 + m * n) / n = n0 / n + m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mult-01          : n ≠ 0 ⊦ (m * n) / n = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mult-02          : n ≠ 0 ⊦ m % n = 0 → m / n * n = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
mult-div         :  ⊦ n % m = 0 ∧ m ≠ 0 → m * n / m = n ;
        used for : s, ls ;
         remarks : proved, used ;
mult-ls          : n ≠ 0 ⊦ m / n < n0 → m < n0 * n ;
        used for : s ;
         remarks : proved ;
mult-ls-01       : n ≠ 0 ⊦ n0 < m / n → n0 * n < m ;
        used for : s ;
         remarks : proved ;
nummult-eq       : n ≠ 0 ⊦ (* m) * m0 = (* n) ↔ n % m = 0 ∧ m0 = n / m ∧ m ≠ 0 ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
nummult-le-01    : 0 < m, n < 0 ⊦ (* m) * m0 ≤ (* n) ↔ m0 ≤ (n + 1 - m) / m ;
        used for : s, ls ;
         remarks : proved ;
nummult-le-03    : 0 < m, n < 0 ⊦ (* n) ≤ (* m) * m0 ↔ n / m ≤ m0 ;
        used for : s, ls ;
         remarks : proved ;
nummult-ls-01    : 0 < m, n < 0 ⊦ (* m) * m0 < (* n) ↔ m0 < n / m ;
        used for : s, ls ;
         remarks : proved ;
nummult-ls-03    : 0 < m, n < 0 ⊦ (* n) < (* m) * m0 ↔ (n + 1 - m) / m < m0 ;
        used for : s, ls ;
         remarks : proved ;
one              : n ≠ 0 ⊦ n / n = 1 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
one-01           :  ⊦ m / 1 = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
rax              : n ≠ 0, m / n * n ≤ m ⊦ m % n = m - m / n * n ;
         remarks : proved, used, used by proved unit ;
rec              : n ≠ 0 ⊦ n ≤ m → m / n = (m - n) / n + 1 ;
         remarks : proved, used by proved unit ;
square-even      :  ⊦ (m * (m + 1)) % 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
square-even-01   :  ⊦ ((m + 1) * (m + 2)) % 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
square-even-02   :  ⊦ (m * m + m) % 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
square-even-03   :  ⊦ ((n + 2) * n + n) % 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
square-inj       : 
⊦     ((m + n) * ((m + n) + 1)) / 2 + n
    = ((m0 + n0) * ((m0 + n0) + 1)) / 2 + n0
  ↔ m = m0 ∧ n = n0 ;
         remarks : proved ;
square-inject    : 
⊦     ((m + n) * (m + n + 1)) / 2 + n
    = ((m0 + n0) * (m0 + n0 + 1)) / 2 + n0
  ↔ m = m0 ∧ n = n0 ;
         remarks : proved, used ;
square-interval  : (m * (m + 1)) / 2 ≤ (n * (n + 1)) / 2 + n0, 
(n * (n + 1)) / 2 + n0 < ((m + 1) * (m + 2)) / 2, n0 ≤ n
⊦ m = n ;
         remarks : proved ;
square-ls        :  ⊦ ((m + 1) * (m + 2)) / 2 < ((n + 1) * (n + 2)) / 2 ↔ m < n ;
        used for : s, ls ;
         remarks : proved, used ;
square-ls-01     :  ⊦ (m * (m + 1)) / 2 < ((n + 1) * (n + 2)) / 2 ↔ m < n + 1 ;
        used for : s, ls ;
         remarks : proved, used ;
square-ls-02     :  ⊦ (m * (m + 1)) / 2 < (n * (n + 1)) / 2 ↔ m < n ;
        used for : s, ls ;
         remarks : proved, used ;
square-ls-03     :  ⊦ m0 ≤ m ∧ m ≤ n → (m * (m + 1)) / 2 + m0 < ((n + 1) * (n + 2)) / 2 ;
        used for : s, ls ;
         remarks : proved ;
square-nle-01    :  ⊦ (n * (n + 1)) / 2 ≤ n ↔ n < 2 ;
        used for : s, ls ;
         remarks : proved, used ;
square-nle-01-01 :  ⊦ ¬ ((n + 1) * (n + 2)) / 2 ≤ n ;
        used for : s, ls ;
         remarks : proved ;
square-nls       :  ⊦ ¬ (n * (n + 1)) / 2 < n ;
        used for : s, ls ;
         remarks : proved ;
two-eq           :  ⊦ m = m / 2 ↔ m = 0 ;
        used for : s, ls ;
         remarks : proved ;
two-le           :  ⊦ m / 2 ≤ m ;
        used for : s ;
         remarks : proved, used by proved unit ;
two-le-01        :  ⊦ m ≤ m / 2 ↔ m = 0 ;
        used for : s, ls ;
         remarks : proved ;
two-le-02        :  ⊦ m % 2 = 0 ∧ n % 2 = 0 → (m / 2 ≤ n / 2 ↔ m ≤ n) ;
        used for : s, ls ;
         remarks : proved ;
two-le-03        :  ⊦ m % 2 = 0 → (m / 2 ≤ n ↔ m ≤ n * 2) ;
        used for : s, ls ;
         remarks : proved, used ;
two-le-04        :  ⊦ m % 2 = 0 → (n ≤ m / 2 ↔ n * 2 ≤ m) ;
        used for : s, ls ;
         remarks : proved ;
two-loup         :  ⊦ m < n → ¬ (m + n) / 2 < m ;
        used for : s, lc ;
         remarks : proved ;
two-loup-01      :  ⊦ m < n ∧ m + 1 ≠ n → ((m + n) / 2 - 1) + 1 = (m + n) / 2 ;
        used for : s, ls ;
         remarks : proved ;
two-loup-02      :  ⊦ m < n ∧ m + 1 ≠ n → ¬ (m + n) / 2 - 1 < m ;
        used for : s ;
         remarks : proved ;
two-loup-03      :  ⊦ m < n ∧ m + 1 ≠ n ∧ n < m → (m + n) / 2 - 1 < m ;
        used for : s ;
         remarks : proved ;
two-loup-04      :  ⊦ m < n ∧ m + 1 ≠ n → ¬ n < (m + n) / 2 - 1 ;
        used for : s ;
         remarks : proved ;
two-loup-05      :  ⊦ m < n → ¬ (m + n) / 2 + 1 < m ;
        used for : s ;
         remarks : proved ;
two-loup-06      :  ⊦ m < n → ¬ n < (m + n) / 2 ;
        used for : s ;
         remarks : proved ;
two-loup-07      :  ⊦ m < n → ¬ n + 1 < (m + n) / 2 ;
        used for : s ;
         remarks : proved ;
two-loup-08      :  ⊦ m < n ∧ n < n0 → (m + n) / 2 < n0 ;
        used for : s ;
         remarks : proved ;
two-loup-09      :  ⊦ (m + n) / 2 = m ↔ ¬ (m ≠ n ∧ m + 1 ≠ n) ;
        used for : ss ;
         remarks : proved ;
two-loup-10      :  ⊦ m < n → ((m + n) / 2 = m ↔ m + 1 = n) ;
        used for : s ;
         remarks : proved ;
two-loup-11      :  ⊦ m < n → ((m + n) / 2 < m + 1 ↔ m + 1 = n) ;
        used for : s ;
         remarks : proved ;
two-loup-12      :  ⊦ (m + n) / 2 < n ↔ m < n ;
        used for : s ;
         remarks : proved ;
two-loup-13      :  ⊦ (m + n) / 2 < m → ¬ (m + n) / 2 < n ;
        used for : s ;
         remarks : proved ;
two-ls           :  ⊦ ¬ m + 1 < m / 2 ;
        used for : s, ls ;
         remarks : proved, used ;
two-ls-01        :  ⊦ m / 2 ≤ m + 1 ;
        used for : s, ls ;
         remarks : proved ;
two-ls-02        :  ⊦ ¬ m < m / 2 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
two-ls-03        :  ⊦ m / 2 < m ↔ m ≠ 0 ;
        used for : ss, lss ;
         remarks : proved, used by proved unit ;
two-ls-04        :  ⊦ m % 2 = 0 → (m / 2 < n ↔ m < n * 2) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
two-ls-05        :  ⊦ m % 2 = 0 → (n < m / 2 ↔ n * 2 < m) ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
two-mdiv2-02     :  ⊦ (2 * m) / 2 = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
two-mdiv2-03     :  ⊦ (2 * m + 1) / 2 = m ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
two-neq          :  ⊦ n ≠ 0 → m + n ≠ m / 2 ;
        used for : s, ls ;
         remarks : proved ;
two-neq-01       :  ⊦ m / 2 ≠ m + 1 ;
        used for : s, ls ;
         remarks : proved ;
two-neq-02       :  ⊦ m / 2 ≠ m + n + 1 ;
        used for : s, ls ;
         remarks : proved ;
two-odd          :  ⊦ (2 * m + 1) % 2 = 1 ;
        used for : s, ls ;
         remarks : proved ;
two-odd-01       :  ⊦ m % 2 = 1 ↔ m % 2 ≠ 0 ;
        used for : ss, lss ;
         remarks : proved, used by proved unit ;
two-one          :  ⊦ 1 / 2 = 0 ;
        used for : s, ls ;
         remarks : proved ;
two-one-01       :  ⊦ m = 1 → m / 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
two-padd         : m < n ⊦ (m + n) / 2 < n ;
         remarks : proved ;
two-peq          : (m + n) / 2 = m, n < m ⊦  ;
         remarks : proved ;
two-ppred        : m ≠ 0 ∧ m ≠ 1 ⊦ m / 2 = (m - 2) / 2 + 1 ;
         remarks : proved ;
two-rec          :  ⊦ (m + 2) / 2 = m / 2 + 1 ;
        used for : s, ls ;
         remarks : proved, used ;
two-succ         :  ⊦ ¬ m + 1 < (m + 1) / 2 ;
        used for : s, ls ;
         remarks : proved ;
two-three        :  ⊦ 3 / 2 = 1 ;
        used for : s, ls ;
         remarks : proved ;
two-two-01       :  ⊦ (2 * m + n) / 2 = m + n / 2 ;
        used for : s ;
         remarks : proved, used by proved unit ;
two-two-02       :  ⊦ 2 / 2 = 1 ;
        used for : s, ls ;
         remarks : proved ;
two-twosucc-02   :  ⊦ (2 * m + n + 1) / 2 = m + (n + 1) / 2 ;
        used for : s, ls ;
         remarks : proved ;
two-zero         :  ⊦ 0 / 2 = 0 ;
        used for : s, ls ;
         remarks : proved ;
two-zero-01      :  ⊦ m = 0 → m / 2 = 0 ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
two-zero-01-01   :  ⊦ m / 2 = 0 ↔ (m = 0 ∨ m = 1) ;
        used for : s ;
         remarks : proved, used, used by proved unit ;
zero             : n ≠ 0 ⊦ 0 / n = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
zero-01          :  ⊦ m < n → m / n = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;


;;; END

