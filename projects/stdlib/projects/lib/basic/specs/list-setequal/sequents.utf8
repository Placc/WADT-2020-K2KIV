
;; variables m : nat;

lemmas

ext-setequal: x ≡ y ↔ ∀ a. a ∈ x ↔ a ∈ y;

swap-init-setequal: a ' + a0 ' + x ≡  a0 ' + a ' + x;
used for: s,ls;

elem-setequal: x ≡ y ∧ a ∈ x → a ∈ y;
used for: f,lf;

elem-setequal2: y ≡ x ∧ a ∈ x → a ∈ y;
used for: f,lf;

setequal-subset-trans1: x ≡ y ∧ x ⊆ z → y ⊆ z;
used for: f,lf;

setequal-subset-trans2: x ≡ y ∧ y ⊆ z → x ⊆ z;
used for: f,lf;

subset-setequal-trans1: x ⊆ y ∧ y ≡ z → x ⊆ z;
used for: f,lf;

subset-setequal-trans2: x ⊆ y ∧ z ≡ y → x ⊆ z;
used for: f,lf;

setequal-trans: x ≡ y ∧ y ≡ z → x ≡ z;
used for: f,lf;

setequal-trans2: x ≡ y ∧ z ≡ y → x ≡ z;
used for: f,lf;

setequal-trans3: y ≡ x ∧ y ≡ z → x ≡ z;
used for: f,lf;

setequal-refl: x ≡ x;
used for: s,ls;

setequal-sym: x ≡ y → (¬ y ≡ x ↔ false);
used for: s,ls;


;;; END

;;;****************************************************************************************
;;; This file is used to add additional theorems. 
;;; 1. Two semicolons start a line comment
;;; 2. (: ... :) delimit a comment. They can be nested!
;;; 3. Reading stops after ;;; END
;;; 4. Theorems have the form
       
<name> : <sequent> ; used for : <some_flags> ; comment : <some_comment> ;

     'used for' and 'comment' are optional.
     <some_comment> may be any text not containing a ;
     <some_flags> is a comma separated list with information that the lemma should
     be used as a simplifier rule or something like that. Since you can add or delete
     simplifier rules etc. by menu commands, you can always omit 'used for' if you want.
     Note: changing the flags or the comment only works if the sequent is also changed!!!
     possible flags are:

     s (simplifier rule), ls (local simplifier rule), f (forward), lf (local forward),
     e (elimination), c (cut), lc (local cut)

