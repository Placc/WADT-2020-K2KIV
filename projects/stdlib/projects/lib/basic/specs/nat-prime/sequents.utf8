variables m0 : nat   ; 

lemmas

testlemma:
⊦   gcd(m, m0) = 1
  ↔   m + m0 = 1
    ∨ ¬(∃ n. prime(n) ∧ 1 < n ∧ n | m ∧ n | m0) ;

;;; END

cong-equiv     :  ⊦ m ≠ 0 → (m | dist(n, n0) ↔ n % m = n0 % m) ;
       remarks : proved ;
dist-add       :  ⊦ dist(m + n, m) = n ;
      used for : s, ls ;
       remarks : proved, used ;
dist-add-01    :  ⊦ dist(m + n, m0 + n) = dist(m, m0) ;
      used for : s, ls ;
       remarks : proved, used ;
dist-c         :  ⊦ dist(m, n) = dist(n, m) ;
      used for : s, ls ;
       remarks : proved, used ;
dist-eq        :  ⊦ dist(m, n) = 0 ↔ m = n ;
      used for : s, ls ;
       remarks : proved ;
dist-mult      :  ⊦ dist(m * n, m * n0) = m * dist(n, n0) ;
      used for : s, ls ;
       remarks : proved, used ;
dist-mult-01   :  ⊦ dist(m * (n1 + n0), m * n0) = m * n1 ;
      used for : s, ls ;
       remarks : proved, used ;
dist-same      :  ⊦ dist(m, m) = 0 ;
      used for : s, ls ;
       remarks : proved, used ;
dist-snd-01    :  ⊦ n ≤ m → dist(m, n) = m - n ;
       remarks : proved, used ;
dist-zero      :  ⊦ dist(m, 0) = m ;
      used for : s, ls ;
       remarks : proved ;
div            :  ⊦ prime(m) ∧ n ≠ 1 → (n | m ↔ n = m) ;
      used for : s, ls ;
       remarks : proved, used ;
div-multadd    :  ⊦ m | m * n + m * n0 ;
      used for : s, ls ;
       remarks : proved ;
divi-add       :  ⊦ m | n → (m | n + n0 ↔ m | n0) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-add-01    :  ⊦ m | m * n + n0 ↔ m | n0 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-dist      :  ⊦ m | n ∧ m | n0 → m | dist(n, n0) ;
       remarks : proved ;
divi-eq        : m | n, n | m ⊦ m = n ;
       remarks : proved, used ;
divi-ls        :  ⊦ m < n0 → (n0 | m ↔ m = 0) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-mod       : m ≠ 0 ⊦ m | n ↔ n % m = 0 ;
       remarks : proved, used ;
divi-mult      :  ⊦ m | m * n0 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-mult-01   :  ⊦ m | n → m | n * n0 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-one       :  ⊦ m | 1 ↔ m = 1 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-one-01    :  ⊦ 1 | m ;
      used for : s, ls ;
       remarks : proved, used ;
divi-primmult  :  ⊦ ¬ m | n ∧ prime(m) → (m | n * n0 ↔ m | n0) ;
      used for : s, ls ;
       remarks : proved ;
divi-ref       :  ⊦ m | m ;
      used for : s, ls ;
       remarks : proved, used ;
divi-same      :  ⊦ m | dist(n, m0) ∧ m | dist(n0, m0) → m | dist(n, n0) ;
      used for : s, ls ;
       remarks : proved ;
divi-sub       :  ⊦ m | n ∧ n0 ≤ n → (m | n - n0 ↔ m | n0) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-succ      :  ⊦ m | n → (m | n + 1 ↔ m = 1) ;
      used for : s, ls ;
       remarks : proved ;
divi-sym       :  ⊦ m | n → (n | m ↔ m = n) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-three     :  ⊦ m ≠ 1 → (m | 3 ↔ m = 3) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-trans     :  ⊦ n0 | m ∧ m | n → n0 | n ;
      used for : f, lf ;
       remarks : proved, used ;
divi-two       :  ⊦ ¬ 2 | 1 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-two-01    :  ⊦ 2 | m + 2 ↔ 2 | m ;
      used for : s, ls ;
       remarks : proved, used ;
divi-two-02    :  ⊦ m ≠ 1 → (m | 2 ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved, used ;
divi-two-03    :  ⊦ ¬ 2 | n → 2 | n + 1 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-zero      :  ⊦ m | 0 ;
      used for : s, ls ;
       remarks : proved, used ;
divi-zero-01   :  ⊦ 0 | m ↔ m = 0 ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-a          :  ⊦ gcd(m, gcd(n, n0)) = gcd(gcd(m, n), n0) ;
      used for : ls ;
       remarks : proved, used ;
gcd-add        :  ⊦ gcd(n, m + n) = gcd(m, n) ;
      used for : ls ;
       remarks : proved ;
gcd-alldiv     :  ⊦ k | m ∧ k | n → k | gcd(m, n) ;
       remarks : proved, used ;
gcd-alldiv-h   : m < n, k | n, k | m ⊦ k | gcd(m, n) ;
       remarks : proved, used ;
gcd-conq-one   : gcd(m, n) = 1 ⊦ ∃ m0. n | dist(m * m0, 1) ;
       remarks : proved ;
gcd-div        :  ⊦ n0 | gcd(m, n) → n0 | m ;
      used for : lf ;
       remarks : proved, used ;
gcd-div-01     :  ⊦ n0 | gcd(m, n) → n0 | n ;
      used for : lf ;
       remarks : proved, used ;
gcd-div-02     :  ⊦ gcd(m, gcd(n, n0)) | gcd(m, n) ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-div-03     :  ⊦ gcd(m, gcd(n, n0)) | n ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-div-04     :  ⊦ gcd(m, gcd(n, n0)) | m ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-div-both   :  ⊦ n0 | gcd(m, n) → n0 | n ∧ n0 | m ;
       remarks : proved, used ;
gcd-div-both-h : m < n, n0 | gcd(m, n) ⊦ n0 | n ∧ n0 | m ;
       remarks : proved, used ;
gcd-div-one    :  ⊦ gcd(m, n) = 1 ∧ m | n * n0 → m | n0 ;
       remarks : proved, used ;
gcd-div-one-01 :  ⊦ gcd(m, n) = 1 ∧ ¬ m | n0 → ¬ m | n * n0 ;
       remarks : proved, used ;
gcd-div-one-02 :  ⊦ gcd(m, n) = 1 ∧ ¬ m | n0 → ¬ m | n0 * n ;
       remarks : proved ;
gcd-divs       :  ⊦ gcd(m, n) | m ;
      used for : ls ;
       remarks : proved, used ;
gcd-eq         :  ⊦ n ≠ 0 ∧ gcd(m, n) = m → m ≤ n ;
       remarks : proved ;
gcd-id         :  ⊦ gcd(m, m) = m ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-id-01      :  ⊦ gcd(m, gcd(m, n)) = gcd(m, n) ;
      used for : s, ls ;
       remarks : proved ;
gcd-le         :  ⊦ m ≠ 0 → gcd(m, n) ≤ m ;
      used for : s ;
       remarks : proved, used ;
gcd-le-both    :  ⊦ m ≠ 0 ∧ n ≠ 0 → gcd(m, n) ≤ m ∧ gcd(m, n) ≤ n ;
       remarks : proved, used ;
gcd-le-both-h  : m < n ⊦ n = 0, m = 0, ¬ m < gcd(m, n) ∧ ¬ n < gcd(m, n) ;
       remarks : proved, used ;
gcd-max        :  ⊦ m ≠ 0 ∧ k | m ∧ k | n → k ≤ gcd(m, n) ;
       remarks : proved ;
gcd-mod        : n ≠ 0 ⊦ gcd(m, n) = gcd(n, m % n) ;
       remarks : proved, used ;
gcd-mod-one    : gcd(m, n) = 1, 1 < n, m ≠ 0 ⊦ ∃ m0. (m * m0) % n = 1 ;
       remarks : proved, used ;
gcd-mod-one-01 : gcd(m, n) = 1, 1 < n ⊦ ∃ m0. (m * m0) % n = 1 ;
       remarks : proved, used ;
gcd-mult       :  ⊦ gcd(k * m, k * n) = k * gcd(m, n) ;
       remarks : proved ;
gcd-multdiv    :  ⊦ gcd(m, n) | m * k ;
      used for : s, ls ;
       remarks : proved ;
gcd-one        :  ⊦ gcd(m, 1) = 1 ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-rec2       :  ⊦ m ≤ n → gcd(m, n) = gcd(m, n - m) ;
       remarks : proved, used ;
gcd-trans      :  ⊦ n0 | n → gcd(m, n0) | gcd(m, n) ;
       remarks : proved ;
gcd-two        :  ⊦ gcd(2, m) ≠ 1 → gcd(2, m) = 2 ;
       remarks : proved ;
gcd-zero-01    :  ⊦ gcd(m, n) = 0 ↔ m = 0 ∧ n = 0 ;
      used for : s, ls ;
       remarks : proved, used ;
gcd-zero-01-h  : m < n, gcd(m, n) = 0 ⊦ m = 0 ∧ n = 0 ;
       remarks : proved, used ;
gcd-zero-02    :  ⊦ gcd(n, 0) = n ;
      used for : s, ls ;
       remarks : proved, used ;
gcdex          :  ⊦ ∃ m0, n0. m * m0 + gcd(m, n) = n * n0 ∨ n * n0 + gcd(m, n) = m * m0 ;
       remarks : proved, used ;
gcdex-dist     :  ⊦ ∃ m0, n0. gcd(m, n) = dist(m * m0, n * n0) ;
       remarks : proved, used ;
gcdexh         : n ≤ m
                 ⊦ 
                 ∃ m0, n0. m * m0 + gcd(m, n) = n * n0 ∨ n * n0 + gcd(m, n) = m * m0 ;
       remarks : proved, used ;
gcdnex         :  ⊦ gcd(m, m0) = 1 ↔ m + m0 = 1 ∨ ¬ (∃ n. 1 < n ∧ n | m ∧ n | m0) ;
       remarks : proved, used ;
gcdnex-prime   : ⊦ 
                   gcd(m, m0) = 1
                 ↔ m + m0 = 1 ∨ ¬ (∃ n. prime(n) ∧ 1 < n ∧ n | m ∧ n | m0) ;
       remarks : proved, used ;
leone          :  ⊦ m ≤ 1 → ¬ prime(m) ;
      used for : s, ls ;
       remarks : proved ;
lstwo          :  ⊦ m < 2 → ¬ prime(m) ;
      used for : s, ls ;
       remarks : proved, used ;
mod-zero       :  ⊦ m % n = 0 ∧ n < m ∧ 2 ≤ n → (prime(m) ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved ;
mod2           :  ⊦ m % 2 = 0 → (prime(m) ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved ;
modprime       :  ⊦ prime(n) ↔ 1 < n ∧ (∀ m. 2 ≤ m ∧ m < n → n % m ≠ 0) ;
       remarks : proved ;
mult           :  ⊦ m ≠ 1 ∧ n ≠ 1 → ¬ prime(m * n) ;
      used for : s, ls ;
       remarks : proved, used ;
mult-01        :  ⊦ m ≠ 1 ∧ k + 1 < n → ¬ prime(m * n) ;
      used for : s, ls ;
       remarks : proved ;
mult-02        :  ⊦ prime(m) → (prime(m * n) ↔ n = 1) ;
      used for : s, ls ;
       remarks : proved, used ;
mult-03        :  ⊦ 2 ≤ m ∧ 2 ≤ n → ¬ prime(m * n) ;
      used for : s, ls ;
       remarks : proved, used ;
not-prime      : ¬ prime(n), 2 ≤ n ⊦ ∃ m. m | n ∧ prime(m) ∧ m * m ≤ n ;
       remarks : proved, used ;
one            :  ⊦ ¬ prime(1) ;
      used for : s, ls ;
       remarks : proved, used, used by proved unit ;
prime-prime    :  ⊦ prime(n) ↔ 1 < n ∧ (∀ m. 2 ≤ m ∧ prime(m) ∧ m * m ≤ n → n % m ≠ 0) ;
       remarks : proved, used ;
prime-smallest :  ⊦ prime(n) ↔ 1 < n ∧ (∀ m. 2 ≤ m ∧ m * m ≤ n → n % m ≠ 0) ;
       remarks : proved ;
rax            :  ⊦ prime(n) ↔ ¬ ¬ (1 < n ∧ (∀ m. m | n → m = 1 ∨ m = n)) ;
       remarks : proved, used ;
succ           :  ⊦ prime(m) → (prime(m + 1) ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved, used by proved unit ;
three          :  ⊦ prime(3) ;
      used for : s, ls ;
       remarks : proved, used, used by proved unit ;
two            :  ⊦ prime(2) ;
      used for : s, ls ;
       remarks : proved, used ;
two-01         :  ⊦ m ≤ 2 → (prime(m) ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved ;
twodiv         :  ⊦ 2 | m → (prime(m) ↔ m = 2) ;
      used for : s, ls ;
       remarks : proved ;
twodiv-01      :  ⊦ prime(m + 1) → (2 | m ↔ m ≠ 1) ;
      used for : s, ls ;
       remarks : proved, used ;
twodiv-02      :  ⊦ prime(m) → (2 | m + 1 ↔ m ≠ 2) ;
      used for : s, ls ;
       remarks : proved ;
zero           :  ⊦ ¬ prime(0) ;
      used for : s, ls ;
       remarks : proved, used, used by proved unit ;


;;; END

