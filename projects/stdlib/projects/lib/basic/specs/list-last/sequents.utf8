;; variables    ; 

lemmas

(: das waren die Axiome :)
mk-len  : # mklist(a,n) = n; used for : s,ls;
mk-elem : a ∈ mklist(b,n) → a = b; used for : f,lf;

(: jetzt Axiome
mk-zero              :  ⊦ mklist(a, 0) = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;

mk-succ              :  ⊦ mklist(a, n + 1) = a ' + mklist(a, n) ;
             comment : no simp-rule, better keep the list together ;
             remarks : proved, used, used by proved unit ;
:)

butlast-one          :  ⊦ a '.butlast = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
b-01                 :  ⊦ x ≠ [] → (x.butlast = [] ↔ x = x.head ') ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
b-02                 :  ⊦ (a ' + x).butlast = [] ↔ x = [] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
bapp                 :  ⊦ y ≠ [] → (x + y).butlast = x + y.butlast ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
bc                   :  ⊦ x ≠ [] → (a ' + x).butlast = a ' + x.butlast ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
bin                  : ⊦ (x + a ' + y).butlast = x + (a ' + y).butlast ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
bin-01               : x ≠ [] ⊦ a ∈ x.butlast → a ∈ x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
bin-02               :  ⊦ ¬ a ∈ x.butlast ∧ a ∈ x → a = x.last ;
            used for : f, lf ;
             remarks : proved, used by proved unit ;
bl                   : ⊦   (a ' + x).butlast + (a ' + x).last ' + y
                         = a ' + x + y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
blapp             :  ⊦ x ≠ [] → (x.butlast = y ↔ x = y + x.last ') ;
            used for : ls ;
             remarks : proved, used ;
blast-head          : ⊦   a ∈ x.butlast ∧ x ≠ []
                         → x.butlast.head = x.head ;
            used for : s, ls ;
             remarks : proved ;
blastN-all           :  ⊦ butlastn(# x, x) = [] ;
            used for : s, ls ;
             remarks : proved, used ;
blastN-all-01        : n = # x ⊦ butlastn(n, x) = [] ;
             remarks : proved, used, used by proved unit ;
blastN-len           :  ⊦ n ≤ # x → # butlastn(n, x) = # x - n ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
blastN-mklist        :  ⊦ butlastn(n, x + mklist(a, n)) = x ;
            used for : s, ls ;
             remarks : proved ;
blastN-rec           : ⊦   n ≠ 0
                         → butlastn(n, x + a ') = butlastn(n -1, x) ;
             remarks : proved, used ;
blastN-rec-01        : ⊦   n ≤ # x
                         → butlastn(n, a ' + x) = a ' + butlastn(n, x) ;
             remarks : proved, used, used by proved unit ;
blastn-app-1         :  ⊦ butlastn(1, x + a ') = x ;
            used for : s, ls ;
             remarks : proved ;
blastn-len-0         :  ⊦ # x = n0 + n1 → # butlastn(n0, x) = n1 ;
            used for : s, ls ;
             remarks : proved ;
bnotempty            :  ⊦ 1 < # x → x.butlast ≠ [] ;
            used for : s, ls ;
             remarks : proved ;
butlast-rec         : ⊦   (a ' + b ' + x).butlast
                         = a ' + (b ' + x).butlast ;
            used for : s, ls ;
             remarks : proved, used ;
butlast-def          :  ⊦ (x + a ').butlast = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
butlast-eq           :  ⊦ x ≠ [] → (x.butlast + a ' = x ↔ a = x.last) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
butlast-last         : x ≠ [] ⊦ x.butlast + x.last ' = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
butlast-last-01      :  ⊦ x.last = a ∧ x ≠ [] → x.butlast + a ' = x ;
             remarks : proved ;
butlast-len          :  ⊦ # (a ' + x).butlast = # x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
consmklist-last      :  ⊦ (a ' + mklist(a, n)).last = a ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
last-one             :  ⊦ a '.last = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
l-01                 :  ⊦ x ≠ [] ∧ x.tail = [] → x.last = x.head ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
l-02                 :  ⊦ x ≠ [] → (a ' + x).last = x.last ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
l-03                 :  ⊦ x ≠ [] ∧ x.tail ≠ [] → x.tail.last = x.last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
l-04                 : ⊦ x ≠ [] → x.tail.last ≠ x.last → x = x.head ' ;
             remarks : proved ;
last-rec             :  ⊦ (b ' + a ' + x).last = (a ' + x).last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
l-06                 :  ⊦ x = x.head ' → x.last = x.head ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
l-in                 :  ⊦ a ∈ x → (b ' + x).last = x.last ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lapp                 :  ⊦ y ≠ [] → (x + y).last = y.last ;
            used for : s, ls, c ;
             remarks : proved, used, used by proved unit ;
lapp-01              :  ⊦ (x + a ' + y).last = (a ' + y).last ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lapp-02              :  ⊦ y ≠ [] → (a ' + x + y).last = y.last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lapp-03              :  ⊦ (a ' + x + b ' + y).last = (b ' + y).last ;
            used for : s, ls ;
             remarks : proved ;
lapp-04              :  ⊦ a ' + x = y + b ' ∧ a ≠ b → x.last = b ;
            used for : f, lf ;
             remarks : proved, used by proved unit ;
lapp-05              :  ⊦ a ' + b ' + x = y + a ' → (b ' + x).last = a ;
             remarks : proved ;
last-01              :  ⊦ (a ' + x + b ').last = b ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
last-def             :  ⊦ (x + a ').last = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
last-elim            : x ≠ []
                       ⊦ a = x.last ∧ y = x.butlast ↔ x = y + a ' ;
             remarks : proved, used, used by proved unit ;
last-ex              : a ≠ x.last, a ∈ x
                       ⊦ ∃ y, z. x = y + a ' + z ∧ z ≠ [] ;
             remarks : proved ;
last-sizeone         :  ⊦ # x = 1 → (y + x).last = x.head ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lb                   :  ⊦ x ≠ [] → # x.butlast = # x - 1 ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lb-01                :  ⊦ # x.butlast < # x ↔ x ≠ [] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
le-leq-one-empty-or-head-equal-last :  ⊦ # x ≤ 1 → x = [] ∨ x.head = x.last ;
             remarks : proved ;
lin                  : ⊦   true → ¬ x.last ∈ x.tail
                         → x = [] ∨ x.tail = [] ;
             remarks : proved ;
lin-01               :  ⊦ x.last ∈ x ↔ x ≠ [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lin-02               :  ⊦ x.last = a ∧ x ≠ [] → a ∈ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lthree               :  ⊦ y ≠ [] → (x + y + z).last = (y + z).last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
mk-butlast           : ⊦   m ≠ 0
                         →   (x + mklist(a, m)).butlast
                           = x + mklist(a, m - 1) ;
            used for : s, ls ;
             remarks : proved, used ;
mk-butlast-01        : ⊦   m ≠ 0
                         → mklist(a, m).butlast = mklist(a, m - 1) ;
            used for : s, ls ;
             remarks : proved ;
mk-empty             :  ⊦ mklist(a, m) = [] ↔ m = 0 ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mk-head             :  ⊦ n ≠ 0 → (mklist(a, n) + x).head = a ;
            used for : s, ls ;
             remarks : proved ;
mk-head-01          :  ⊦ m ≠ 0 → mklist(a, m).head = a ;
            used for : s, ls ;
             remarks : proved ;
mk-in                :  ⊦ a ∈ mklist(a, m) ↔ m ≠ 0 ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mk-inj               : ⊦   m ≠ 0
                         → (  mklist(a, m) = mklist(b, n)
                            ↔ a = b ∧ m = n) ;
            used for : s, ls ;
             remarks : proved ;
mk-inj-01            :  ⊦ mklist(a, m) = mklist(a, n) ↔ m = n ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mk-last              :  ⊦ mklist(a, n) + a ' = a ' + mklist(a, n) ;
            used for : ls ;
             remarks : proved, used, used by proved unit ;
mk-last-01           :  ⊦ m ≠ 0 → mklist(a, m).last = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mk-last-01-01        :  ⊦ m ≠ 0 → (x + mklist(a, m)).last = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mk-last-02           :  ⊦ n ≠ 0 → mklist(a, n) = mklist(a, n -1) + a ' ;
             remarks : proved, used, used by proved unit ;
mk-one               : ⊦   m ≠ 0
                         → (mklist(a, m) + x = a ' ↔ m = 1 ∧ x = []) ;
            used for : s, ls ;
             remarks : proved ;
mk-one-01            :  ⊦ mklist(a, n) = a ' ↔ n = 1 ;
            used for : s, ls ;
             remarks : proved ;
mk-plus              : ⊦   mklist(a, m + n)
                         = mklist(a, m) + mklist(a, n) ;
             comment : no simp-rule because: mklist(a, m + 1) => mklist(a, m) + a 'which is almost never what you want. ;
             remarks : proved, used, used by proved unit ;
mk-rec               :  ⊦ m ≠ 0 → mklist(a, m) = a + mklist(a, m - 1) ;
             remarks : proved, used, used by proved unit ;
mk-tail              :  ⊦ n ≠ 0 → mklist(a, n).tail = mklist(a, n -1) ;
            used for : s, ls ;
             remarks : proved ;
mk-tail-01           : ⊦   m ≠ 0
                         →   (mklist(a, m) + x).tail
                           = mklist(a, m -1) + x ;
            used for : s, ls ;
             remarks : proved ;
mk-two               :  ⊦ mklist(a, n + 2) = a ' + a ' + mklist(a, n) ;
             remarks : proved ;
mk-two-01            :  ⊦ mklist(a, 2) = a ' + a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mklist-append        : ⊦   mklist(a, m) + mklist(a, n)
                         = mklist(a, m + n) ;
             remarks : proved ;
mklist-last          :  ⊦ mklist(a, n) + a ' = mklist(a, n + 1) ;
             remarks : proved ;
mklist-one           :  ⊦ mklist(a, 1) = a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
mklist-rmdup         : ⊦   ¬ a ∈ x ∧ n ≠ 0
                         → rmdup(x + mklist(a, n)) = rmdup(x) + a ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
mklist-rmdup-01      :  ⊦ n ≠ 0 → rmdup(mklist(a, n)) = a ' ;
            used for : s, ls ;
             remarks : proved, used ;
mklist-split-intro   : ⊦   n ≤ m
                         →   mklist(a, m)
                           = mklist(a, m - n) + mklist(a, n) ;
             remarks : proved ;
nodups-butlastn      : ⊦   ¬ dups(x) ∧ n ≤ # x
                         → (dups(butlastn(n, x)) ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
postfix-app          :  ⊦ x + y ⊒ z → y ⊒ z ;
            used for : s, ls ;
             remarks : proved, used ;
postfix-app-01       :  ⊦ x ⊒ y + x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
postfix-app-02       :  ⊦ y + x ⊒ z + x ↔ y ⊒ z ;
            used for : s, ls ;
             remarks : proved, used ;
postfix-app-04       :  ⊦ x = (y + a ') + z → a ' + z ⊒ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
postfix-app-05       :  ⊦ b ' + x ⊒ (y + b ') + x ;
            used for : s, ls ;
             remarks : proved ;
postfix-app-06       :  ⊦ x + a ' ⊒ y + b ' ↔ a = b ∧ x ⊒ y ;
            used for : s, ls ;
             remarks : proved, used ;
postfix-empty        :  ⊦ [] ⊒ x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
postfix-empty-01     :  ⊦ ¬ a ' + x ⊒ [] ;
            used for : s, ls ;
             remarks : proved ;
postfix-empty-02     :  ⊦ ¬ x + a ' ⊒ [] ;
            used for : s, ls ;
             remarks : proved ;
postfix-empty-03     :  ⊦ x ⊒ [] ↔ x = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
postfix-in           :  ⊦ a ∈ x ∧ x ⊒ y → a ∈ y ;
             remarks : proved, used, used by proved unit ;
postfix-in-01        :  ⊦ a ∈ x ∧ ¬ a ∈ y → ¬ x ⊒ y ;
            used for : s, ls ;
             remarks : proved, used ;
postfix-in-02        :  ⊦ a ∈ x ∧ x ⊒ y → (a ∈ y ↔ true) ;
            used for : ss, lss ;
             remarks : proved ;
postfix-in-03        :  ⊦ a ' + x ⊒ y → (a ∈ y ↔ true) ;
            used for : ss, lss ;
             remarks : proved ;
postfix-is-lessOrEqual :  ⊦ x ⊒ y ↔ x = y ∨ x < y ;
             remarks : proved, used by proved unit ;
postfix-length       :  ⊦ x ⊒ y → # x ≤ # y ;
            used for : s, ls ;
             remarks : proved ;
postfix-more         :  ⊦ ¬ x + a ' + y ⊒ x ;
            used for : s, ls ;
             remarks : proved ;
postfix-more-01      :  ⊦ ¬ a ' + x ⊒ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
postfix-one          :  ⊦ x ⊒ a ' ↔ x = [] ∨ x = a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
postfix-one-less     :  ⊦ a ' + x ⊒ y → (x ⊒ y ↔ true) ;
            used for : ss, lss ;
             remarks : proved ;
postfix-rec          : ⊦   x ≠ [] ∧ y ≠ []
                         → (  x ⊒ y
                            ↔ x.last = y.last ∧ x.butlast ⊒ y.butlast) ;
             remarks : proved, used ;
postfix-rec-right    :  ⊦ x ⊒ a ' + y ↔ x = a ' + y ∨ x ⊒ y ;
             remarks : proved, used ;
postfix-reflexivity  :  ⊦ x ⊒ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
postfix-tail         :  ⊦ x ≠ [] → x.tail ⊒ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
postfix-tail-01      :  ⊦ x ≠ [] ∧ x ⊒ y → x.tail ⊒ y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
postfix-same         :  ⊦ x + a ' ⊒ y + a ' ↔ x ⊒ y ;
            used for : s, ls ;
             remarks : proved, used ;
postfix-split-stronger : x ⊒ y + z, ¬ x ⊒ z ⊦ ∃ x0. x0 + z = x ∧ x0 ⊒ y ;
             remarks : proved, used ;
postfix-trans        :  ⊦ x ⊒ x0 ∧ x0 ⊒ y → x ⊒ y ;
             remarks : proved ;
postifx-app-03       :  ⊦ x + y ⊑ x + z ↔ y ⊑ z ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
postifx-split        : x ⊒ y + z, ¬ x ⊒ z ⊦ ∃ x0. x0 + z = x ;
             remarks : proved ;
prefix-app           :  ⊦ ¬ x ⊑ y + z → ¬ x ⊑ y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-app-01        :  ⊦ x + y ⊑ x ↔ y = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-app-02        :  ⊦ x + y ⊑ y ↔ x = [] ;
            used for : s, ls ;
             remarks : proved ;
prefix-app-03        :  ⊦ x + y + z ⊑ y ↔ x = [] ∧ z = [] ;
            used for : s, ls ;
             remarks : proved ;
prefix-app-04        :  ⊦ x + y ⊑ z → x ⊑ z ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-app-05        :  ⊦ x ⊑ x + y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-app-size-eq   :  ⊦ # x0 = # x1 → (x0 ⊑ x1 + x2 ↔ x0 = x1) ;
            used for : s ;
             remarks : proved, used by proved unit ;
prefix-attach        :  ⊦ ¬ x ⊑ y → (x ⊑ y + a ' ↔ y + a ' = x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-butlast       :  ⊦ x0 ≠ [] ∧ x0 ⊑ x1 → x0.butlast ⊑ x1 ;
             remarks : proved ;
prefix-butlast-append :  ⊦ x ≠ [] → (x ⊑ x.butlast + a ' ↔ a = x.last) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-empty         :  ⊦ x ⊑ [] ↔ x = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-empty-03      :  ⊦ ¬ x + a ' + y ⊑ [] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-eq            :  ⊦ x ⊑ y → (y ⊑ x ↔ x = y) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-equality      :  ⊦ x = y ↔ x ⊑ y ∧ y ⊑ x ;
             remarks : proved ;
prefix-ex            : ⊦   ¬ x ⊑ y
                         → (x ⊑ y + z ↔ (∃ x0. x = y + x0 ∧ x0 ⊑ z)) ;
             remarks : proved, used by proved unit ;
prefix-in            :  ⊦ x + a ' ⊑ y → (a ∈ y ↔ true) ;
            used for : ss, lss ;
             remarks : proved ;
prefix-in-01         :  ⊦ ¬ a ∈ y → ¬ x + a ' + x0 ⊑ y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-in-02         :  ⊦ a ∈ x ∧ x ⊑ y → a ∈ y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-in-03         :  ⊦ a ' + x ⊑ y → (a ∈ y ↔ true) ;
            used for : ss, lss ;
             remarks : proved ;
prefix-intro         :  ⊦ ¬ x ⊑ y ∧ # x ≤ # y → x + x0 ≠ y + y0 ;
             remarks : proved, used by proved unit ;
prefix-longer        :  ⊦ ¬ x + a ' ⊑ x ;
            used for : s, ls ;
             remarks : proved ;
prefix-longer-01     :  ⊦ # y < # x → ¬ x ⊑ y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-more          :  ⊦ ¬ x + a ' + y ⊑ x ;
            used for : s, ls ;
             remarks : proved ;
prefix-nil           :  ⊦ [] ⊑ x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-notin         :  ⊦ a ∈ x ∧ ¬ a ∈ y → ¬ x ⊑ y ;
            used for : s, ls ;
             remarks : proved ;
prefix-one           :  ⊦ a ' ⊑ b ' + x ↔ a = b ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
prefix-one-01        :  ⊦ x ⊑ a ' ↔ (x = [] ∨ x = a ') ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-rec           : ⊦   x ≠ []
                         → (x ⊑ a ' + y ↔ x.head = a ∧ x.tail ⊑ y) ;
             remarks : proved, used, used by proved unit ;
prefix-rec-01        : ⊦   a ' + x ⊑ y
                         ↔ y ≠ [] ∧ a = y.head ∧ x ⊑ y.tail ;
             remarks : proved, used, used by proved unit ;
prefix-rec-02        :  ⊦ b ' + x ⊑ b ' + y ↔ x ⊑ y ;
            used for : s, ls ;
             remarks : proved, used ;
prefix-rec-03        :  ⊦ a ' + x ⊑ b ' + y ↔ a = b ∧ x ⊑ y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-same          :  ⊦ x + a ' ⊑ x + a ' + y ;
            used for : s, ls ;
             remarks : proved, used ;
prefix-same-01       :  ⊦ x = y + a ' + z → y + a ' ⊑ x ;
            used for : s, ls ;
             remarks : proved ;
prefix-self          :  ⊦ x ⊑ x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
prefix-size-eq       :  ⊦ # x0 = # x1 → (x0 ⊑ x1 ↔ x0 = x1) ;
            used for : s ;
             remarks : proved, used by proved unit ;
prefix-split         : x ⊑ y + z, ¬ x ⊑ y ⊦ ∃ x0. y + x0 = x ;
             remarks : proved ;
prefix-split-stronger : x ⊑ y + z, ¬ x ⊑ y ⊦ ∃ x0. x = y + x0 ∧ x0 ⊑ z ;
             remarks : proved, used ;
prefix-trans         :  ⊦ x ⊑ y ∧ y ⊑ z → x ⊑ z ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
rev-app              :  ⊦ rev(x + y) = rev(y) + rev(x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rev-disjoint         :  ⊦ disj(x, rev(y)) ↔ disj(x, y) ;
            used for : s, ls ;
             remarks : proved ;
rev-disjoint-01      :  ⊦ disj(rev(x), y) ↔ disj(x, y) ;
            used for : s, ls ;
             remarks : proved, used ;
rev-dups             :  ⊦ dups(rev(x)) ↔ dups(x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rev-empty            :  ⊦ rev(x) = [] ↔ x = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rev-in               :  ⊦ a ∈ rev(x) ↔ a ∈ x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rev-length           :  ⊦ # rev(x) = # x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rev-mklist           :  ⊦ rev(mklist(a, n)) = mklist(a, n) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rev-one              :  ⊦ rev(a ') = a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rev-tail             :  ⊦ x ≠ [] → (rev(x) + y).tail = rev(x).tail + y ;
            used for : s, ls ;
             remarks : proved ;
rev-rev-identity     :  ⊦ rev(rev(x)) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rev-rewrite          :  ⊦ rev(x) = y ↔ x = rev(y) ;
             remarks : proved ;
revert-equal         :  ⊦ rev(x) = rev(y) ↔ x = y ;
            used for : s, ls ;
             remarks : proved ;
revert-last          :  ⊦ a ' + rev(x) = rev(x + a ') ;
             comment :  for interactive rewriting ;
             remarks : proved ;
splitlasteq          : y ≠ []
                       ⊦ x + a ' = y ↔ x = y.butlast ∧ a = y.last ;
             remarks : proved, used by proved unit ;
splitlasteq-01       : y ≠ []
                       ⊦ y = x + a ' ↔ x = y.butlast ∧ a = y.last ;
             remarks : proved, used by proved unit ;


;;; END

