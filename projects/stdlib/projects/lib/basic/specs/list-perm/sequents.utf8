;; variables    ; 

lemmas
perm-dups : not dups(x) and dups(y) → not perm(x, y + z); used for : s,ls;

perm-dups : not dups(x) and dups(z) → not perm(x, y + z); used for : s,ls;
;;; END
ocs-not-more : not # x < #oc(a, x); used for : s,ls;
ocs-same-length-mklist : #oc(a, x) = # x ↔ x = mklist(a, # x);
ocs-same-length-all : #oc(a, x) = # x ↔ all b. b ∈ x -> b = a;
papp :
perm(x, x0) → (perm(x + y, x0 + y0) ↔ perm(y, y0));

perm-put-del1 :
n < # y → perm(y[n, a] -1l a, y -1l y[n]); used for : s,ls;

ocs-del1-if : #oc(a, x -1l b) = (a ≠ b ∨ ¬ b ∈ x ⊃ #oc(a, x) ; #oc(a, x) -1 );

subdel-03 : x ⊆m y -1l a ↔ x -l a ⊆m y -l a ∧ (#oc(a, x) < #oc(a, y) ∨ ¬ a ∈ x);
;;; END
sub-del-any : x ⊆m y ↔ x -l a  ⊆m y -l a ∧ #oc(a, x) ≤ #oc(a, y);
subdel : x -1l a ⊆m y ↔ x -l a ⊆m y -l a ∧ #oc(a, x) ≤ #oc(a, y) + 1;

subrec-01           :  ⊦ x ⊆m a ' + y ↔ (#oc(a, x) ≤ #oc(a, y) + 1 ∧ x -1l a ⊆m y) ;

         remarks : proved, used ;
;;; END
a                :  ⊦ perm(x, y) → perm(z + x, z + y) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
ad               :  ⊦ a ∈ y → perm(x + (y -1l a), (x + y) -1l a) ;
        used for : s, ls ;
         remarks : proved ;
adjoin           :  ⊦ perm(x, y) → perm(x ++ a, y ++ a) ;
        used for : s, ls ;
         remarks : proved ;
app              :  ⊦ perm(x + y, x + z) ↔ perm(y, z) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
app-01           :  ⊦ perm(x + y, z + y) ↔ perm(x, z) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
app-02           :  ⊦ perm(x + y, z + x) ↔ perm(y, z) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
app-03           :  ⊦ perm(x, x + y) ↔ y = [] ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
app-04           :  ⊦ perm(y, x + y) ↔ x = [] ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
app-05           :  ⊦ perm(x + a ', y + a ') ↔ perm(x, y) ;
        used for : s, ls ;
         remarks : proved ;
c                :  ⊦ perm(x, y + z) → perm(x0 + x, y + x0 + z) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
cons             :  ⊦ perm(a ' + x, a ' + y) ↔ perm(x, y) ;
        used for : s, ls ;
         remarks : proved ;
del              :  ⊦ perm(x, a ' + y) ↔ a ∈ x ∧ perm(x -1l a, y) ;
        used for : ls ;
         remarks : proved, used ;
del-01           :  ⊦ perm(a ' + x, y) ↔ ¬ ¬ (a ∈ y ∧ perm(x, y -1l a)) ;
        used for : ls ;
         remarks : proved, used ;
del-02           :  ⊦ perm(x -1l a, y -1l a) ∧ a ∈ x ∧ a ∈ y → perm(x, y) ;
        used for : s, ls ;
         remarks : proved, used ;
del-03           :  ⊦ perm(x, a ' + y) ↔ ¬ ¬ (a ∈ x ∧ perm(x -1l a, y)) ;
        used for : ls ;
         remarks : proved, used ;
del-04           :  ⊦ perm(x, y) → perm(x -1l a, y -1l a) ;
        used for : s, ls ;
         remarks : proved, used ;
del-05           :  ⊦ perm(x, x -1l a) ↔ ¬ a ∈ x ;
        used for : s, ls ;
         remarks : proved ;
del-in           :  ⊦ a ∈ x ∧ a ∈ y → (perm(x -1l a, y -1l a) ↔ perm(x, y)) ;
         remarks : proved, used ;
del1             :  ⊦ a ∈ x → #oc(a, x -1l a) = #oc(a, x) -1 ;
        used for : s, ls ;
         remarks : proved, used ;
del1-01          :  ⊦ a ≠ b → #oc(a, x -1l b) = #oc(a, x) ;
        used for : s, ls ;
         remarks : proved, used ;
delapp           :  ⊦ perm(x + y, y -1l a) ↔ x = [] ∧ ¬ a ∈ y ;
        used for : s, ls ;
         remarks : proved ;
diff             :  ⊦ perm(x, x0) ∧ perm(y, y0) → perm(x \ y, x0 \ y0) ;
        used for : s, ls ;
         remarks : proved ;
empty            :  ⊦ perm(x, []) ↔ x = [] ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
empty-01         :  ⊦ perm([], y) ↔ y = [] ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
filter           :  ⊦ perm(x, x0) ∧ perm(y, y0) → perm(filter(x, y), filter(x0, y0)) ;
        used for : s, ls ;
         remarks : proved ;
in               :  ⊦ a ∈ y ∧ ¬ a ∈ x → ¬ perm(x, y) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
in-01            :  ⊦ ¬ a ∈ x → ¬ perm(x, a ' + y) ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
in-02            :  ⊦ perm(a ' + x, b ' + y) ∧ a ≠ b → a ∈ y ;
        used for : s, ls ;
         remarks : proved ;
in-03            :  ⊦ perm(a ' + x, b ' + y) ∧ a ≠ b → b ∈ x ;
        used for : s, ls ;
         remarks : proved ;
in-04            :  ⊦ perm(x, y) ∧ a ∈ x → a ∈ y ;
         remarks : proved ;
in-05            :  ⊦ a ∈ x → #oc(a, x) ≠ 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
in-put           :  ⊦ 1 < #oc(a, x) ∧ m < # x → a ∈ x[m, b] ;
        used for : s, ls ;
         remarks : proved ;
l                :  ⊦ perm(x, y) → (# x = # y ↔ true) ;
        used for : ls ;
         remarks : proved, used by proved unit ;
neq              :  ⊦ perm(x, y) ∧ ¬ perm(x0, y) → x ≠ x0 ;
        used for : s, ls, lf ;
         remarks : proved, used ;
nodups           : ∀ a. a ∈ x ↔ a ∈ y, ¬ dups(x), ¬ dups(y) ⊦ perm(x, y) ;
         remarks : proved ;
notin            :  ⊦ ¬ a ∈ x → #oc(a, x) = 0 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
oc               :  ⊦ x ⊆m y → ¬ #oc(a, y) < #oc(a, x) ;
        used for : s, ls ;
         remarks : proved ;
oc-adjoin        :  ⊦ a ≠ b → #oc(a, x ++ b) = #oc(a, x) ;
        used for : s, ls, lc ;
         remarks : proved ;
oc-del           :  ⊦ ¬ #oc(a, x) < #oc(a, x -1l b) ;
        used for : s, ls ;
         remarks : proved, used ;
oc-del-01        :  ⊦ a ∈ y → #oc(a, (x + y) -1l a) = #oc(a, x + y) -1 ;
        used for : s, ls ;
         remarks : proved, used ;
oc-del-02        :  ⊦ #oc(a0, x) ≤ #oc(a0, y) → ¬ #oc(a0, y -1l a) < #oc(a0, x -1l a) ;
        used for : s, ls ;
         remarks : proved, used ;
oc-diff          :  ⊦ a ∈ y → #oc(a, x \ y) = 0 ;
        used for : s, ls, lc ;
         remarks : proved, used ;
oc-diff-01       :  ⊦ ¬ a ∈ y → #oc(a, x \ y) = #oc(a, x) ;
        used for : s, ls, lc ;
         remarks : proved, used ;
oc-dups          :  ⊦ n < #oc(a, x) ∧ ¬ dups(x) → #oc(a, x) = 1 ;
        used for : f, lf ;
         remarks : proved, used ;
oc-filt          :  ⊦ a ∈ y → #oc(a, filter(x, y)) = #oc(a, x) ;
        used for : s, ls, lc ;
         remarks : proved, used ;
oc-filt-01       :  ⊦ ¬ a ∈ y → #oc(a, filter(x, y)) = 0 ;
        used for : s, ls, lc ;
         remarks : proved, used ;
oc-zero          :  ⊦ #oc(a, x) = 0 ↔ ¬ a ∈ x ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
ocappend         :  ⊦ #oc(a, x + y) = #oc(a, x) + #oc(a, y) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
ocnodups         :  ⊦ n ≤ #oc(a, x) ∧ ¬ dups(x) → n ≤ 1 ;
        used for : f, lf ;
         remarks : proved, used, used by proved unit ;
ocnodups-01      :  ⊦ ¬ dups(x) → (1 ≤ #oc(a, x) ↔ a ∈ x) ;
        used for : s, ls ;
         remarks : proved ;
ocone            :  ⊦ a ∈ x → (#oc(a, x) ≤ 1 ↔ #oc(a, x) = 1) ;
        used for : s, ls ;
         remarks : proved ;
ocs-del          :  ⊦ #oc(a, x -l a) = 0 ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-del-del1     :  ⊦ #oc(a, x) = 1 → x -l a = x -1l a ;
         remarks : proved ;
ocs-del-length   :  ⊦ a ≠ b → #oc(a, x -l b) = #oc(a, x) ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-del1         :  ⊦ 1 < #oc(a, x) → a ∈ x -1l a ;
        used for : s, ls ;
         remarks : proved ;
ocs-dups-ex      :  ⊦ dups(x) ↔ (∃ a. a ∈ x ∧ #oc(a, x) > 1) ;
         remarks : proved ;
ocs-mklist       :  ⊦ x = mklist(a, #oc(a, x)) ↔ x -l a = [] ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-put          :  ⊦ x[m] ≠ a ∧ m < # x → #oc(a, x[m, a]) = #oc(a, x) + 1 ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-put-01       :  ⊦ x[m] ≠ a ∧ a ≠ b ∧ m < # x → #oc(a, x[m, b]) = #oc(a, x) ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-put-02       :  ⊦ x[m] = a ∧ a ≠ b ∧ m < # x → #oc(a, x[m, b]) = #oc(a, x) -1 ;
        used for : s, ls ;
         remarks : proved, used ;
ocs-sw           :  ⊦ m < # x ∧ n < # x → #oc(a, x[m, x[n]][n, x[m]]) = #oc(a, x) ;
        used for : s, ls ;
         remarks : proved, used ;
one              :  ⊦ #oc(a, a ') = 1 ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
one-01           :  ⊦ a ≠ b → #oc(a, b ') = 0 ;
        used for : s, ls, lc ;
         remarks : proved, used, used by proved unit ;
papp             : perm(x, x0), perm(y, y0) ⊦ perm(x + y, x0 + y0) ;
         remarks : proved, used by proved unit ;
papp-01          : perm(x, x0), perm(y, y0) ⊦ perm(x + y, y0 + x0) ;
         remarks : proved ;
papp-02          : perm(x, x0), perm(x + y, y0 + x0) ⊦ perm(y, y0) ;
         remarks : proved ;
perm-all         :  ⊦ perm(x, y) ↔ (∀ a. a ∈ x ∨ a ∈ y → #oc(a, x) = #oc(a, y)) ;
         remarks : proved, used ;
perm-com1        :  ⊦ perm(x + y, z) → perm(y + x, z) ;
         remarks : proved, used by proved unit ;
perm-com2        :  ⊦ perm(x, y + z) → perm(x, z + y) ;
         remarks : proved, used by proved unit ;
perm-def         :  ⊦ perm(x, y) ↔ ¬ ¬ (x ⊆m y ∧ y ⊆m x) ;
         remarks : proved, used ;
perm-del         :  ⊦ perm(x, y) → (perm(x -1l a, z) ↔ perm(y -1l a, z)) ;
         remarks : proved ;
perm-del-01      :  ⊦ perm(x -l a, z) ∧ perm(x, y) → (¬ perm(y -l a, z) ↔ false) ;
        used for : s, ls ;
         remarks : proved ;
perm-del-in      :  ⊦ a ∈ y → ¬ perm(x -l a, y) ;
        used for : s, ls ;
         remarks : proved, used ;
perm-dups        : perm(x, y), ¬ dups(x) ⊦ ¬ dups(y) ;
         remarks : proved, used ;
perm-dups-01     :  ⊦ dups(x) ∧ ¬ dups(y) → ¬ perm(x, y) ;
        used for : s, ls ;
         remarks : proved ;
perm-e           :  ⊦ perm([], []) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
perm-l           :  ⊦ perm(a ' + x, y) ↔ a ∈ y ∧ perm(x, y -1l a) ;
        used for : ls ;
         remarks : proved ;
perm-last-rec    :  ⊦ perm(x, y + a ') ↔ a ∈ x ∧ perm(x -1l a, y) ;
        used for : ls ;
         remarks : proved, used, used by proved unit ;
perm-mklist      :  ⊦ perm(x, mklist(a, n)) ↔ x = mklist(a, n) ;
        used for : s, ls ;
         remarks : proved, used ;
perm-mklist-del  :  ⊦ ¬ a ∈ y → (perm(x, mklist(a, #oc(a, x)) + y) ↔ perm(x -l a, y)) ;
         remarks : proved ;
perm-one         :  ⊦ perm(x, a ') ↔ x = a ' ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
perm-put         :  ⊦ n < # y → (perm(x, y[n, a]) ↔ a ∈ x ∧ perm(x -1l a, y -1l y[n])) ;
         remarks : proved ;
perm-r           :  ⊦ y ≠ [] → ¬ perm([], y) ;
        used for : s, ls ;
         remarks : proved ;
perm-rec         :  ⊦ perm(y, z + a ' + x) ↔ a ∈ y ∧ perm(y -1l a, z + x) ;
         remarks : proved, used ;
perm-rev         :  ⊦ perm(x, rev(x)) ;
        used for : s, ls ;
         remarks : proved, used ;
perm-rev-01      :  ⊦ perm(x, rev(y)) ↔ perm(x, y) ;
        used for : s, ls ;
         remarks : proved ;
perm-rmdup-rev   :  ⊦ perm(x, rmdup(rev(y))) ↔ perm(x, rmdup(y)) ;
        used for : s, ls ;
         remarks : proved ;
perm-rmv-in      :  ⊦ perm(x + (a + y), x0 + (a + y0)) ↔ perm(x + y, x0 + y0) ;
        used for : s, ls ;
         remarks : proved ;
perm-rmv-in-list :  ⊦ perm(x + a ' + y, x0 + a ' + y0) ↔ perm(x + y, x0 + y0) ;
        used for : s, ls ;
         remarks : proved, used by proved unit ;
perm-same-prefix :  ⊦ perm(y, z) ↔ (∃ x, y0, z0. y = x + y0 ∧ z = x + z0 ∧ perm(y0, z0)) ;
         comment :  useful for induction on # y0. ;
         remarks : proved, used by proved unit ;
perm-shift-in2   :  ⊦ perm(x, y + z + a ') → perm(x, y + a ' + z) ;
         remarks : proved, used, used by proved unit ;
perm-shift-out2  :  ⊦ perm(x, y + a ' + z) → perm(x, y + z + a ') ;
         remarks : proved ;
perm-switch      : ⊦ 
                     m < # y ∧ n < # y ∧ a = y[n] ∧ b = y[m]
                   → (perm(x, y[m, a][n, b]) ↔ perm(x, y)) ;
         remarks : proved, used by proved unit ;
rec              : ⊦ 
                     a ≠ b
                   → (perm(a ' + x, b ' + y) ↔ a ∈ y ∧ b ∈ x ∧ perm(x -1l b, y -1l a)) ;
        used for : ls, lc ;
         remarks : proved, used ;
rec-01           :  ⊦ perm(x + a ' + x0, y) ↔ a ∈ y ∧ perm(x + x0, y -1l a) ;
         remarks : proved ;
ref              :  ⊦ perm(x, x) ;
        used for : s, ls ;
         remarks : proved, used, used by proved unit ;
rest             :  ⊦ a ' + x ⊆m b ' + x ↔ a = b ;
        used for : s, ls ;
         remarks : proved ;
shift            :  ⊦ perm(x + y, y + x) ;
         remarks : proved ;
shift-01         :  ⊦ perm(x + a ' + y, a ' + x + y) ;
         remarks : proved ;
shift-02         :  ⊦ perm(x + x0, y) ↔ perm(x0 + x, y) ;
         remarks : proved, used, used by proved unit ;
shift-03         :  ⊦ perm(x + a ' + x0, y) ↔ perm(a ' + x + x0, y) ;
         remarks : proved, used, used by proved unit ;
size-perm        : # x = # y, ¬ dups(x), ∀ a. a ∈ x → a ∈ y ⊦ perm(x, y) ;
         remarks : proved ;
subapp           :  ⊦ x ⊆m x0 ∧ y ⊆m y0 → x + y ⊆m x0 + y0 ;
        used for : s, ls ;
         remarks : proved, used ;
subapp-01        :  ⊦ x ⊆m x0 ∧ y ⊆m y0 → y + x ⊆m x0 + y0 ;
        used for : s, ls ;
         remarks : proved, used ;
subapp-02        :  ⊦ x ⊆m x0 → x ⊆m x0 + y ;
        used for : s, ls ;
         remarks : proved, used ;
subapp-03        :  ⊦ x ⊆m x0 → x ⊆m y + x0 ;
        used for : s, ls ;
         remarks : proved, used ;
subdel           :  ⊦ x ⊆m y -1l a → (¬ x ⊆m y ↔ false) ;
        used for : s, ls ;
         remarks : proved ;
subdel-01        :  ⊦ x ⊆m y + (y0 -1l a) ∧ a ∈ y0 → x ⊆m (y + y0) -1l a ;
        used for : s, ls ;
         remarks : proved, used ;
subempty         :  ⊦ [] ⊆m x ;
        used for : s, ls ;
         remarks : proved, used ;
subperm          :  ⊦ x ⊆ y ∧ perm(x, x0) → x0 ⊆ y ;
        used for : f, lf ;
         remarks : proved ;
subperm-01       :  ⊦ x ⊆ y ∧ perm(y, y0) → x ⊆ y0 ;
        used for : f, lf ;
         remarks : proved ;
subrec           :  ⊦ a ' + x ⊆m y ↔ ¬ ¬ (a ∈ y ∧ x ⊆m y -1l a) ;
        used for : ls ;
         remarks : proved, used ;
subsize          :  ⊦ x ⊆m y → # x ≤ # y ;
         remarks : proved, used ;
sym              :  ⊦ perm(x, y) ↔ perm(y, x) ;
         remarks : proved, used, used by proved unit ;
sym-01           :  ⊦ perm(x, y) → perm(y, x) ;
        used for : lf ;
         remarks : proved, used, used by proved unit ;
sym-02           :  ⊦ ¬ perm(x, y) → ¬ perm(y, x) ;
        used for : ls, lf ;
         remarks : proved, used, used by proved unit ;
trans            :  ⊦ perm(x, y) ∧ perm(y, z) → perm(x, z) ;
        used for : f, lf ;
         remarks : proved, used, used by proved unit ;


;;; END

