;; variables    ; 

lemmas



pos-get-01: ¬ dups(x) ∧ x[n] = a ∧ n < # x → pos(a, x) = n;
used for:s,ls;

del-rmdup-length-nle : not # rmdup(a ' + x) ≤ # rmdup(x -l a); used for : s,ls;

;; firstn-allprefix: # x0 = n ∧ x0 ? x2 → firstn(n, x2) = x0;
firstn-one: firstn(1, a ') = a '; used for: s,ls;

put-firstn-restn : n < # x → x[n, a] = firstn(n, x) + a ' + restn(n + 1, x);
;;; END
app                  :  ? a ∈ x → (x + y) -1l a = (x -1l a) + y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
app-01               :  ? ¬ a ∈ x → (x + y) -1l a = x + (y -1l a) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
app-05               :  ? a ∈ x → pos(a, x + y) = pos(a, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
app-05-neg           :  ? ¬ a ∈ x → pos(a, x + y) = pos(a, y) + # x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
append-mod           : ? 
                         # x ≤ n ∧ n < # x + # x0
                       → ((x + x0)[n, a] = x + x1 ↔ x0[n - # x, a] = x1) ;
             remarks : proved ;
at-last              :  ? x ≠ [] → x[# x - 1] = x .last ;
             remarks : proved, used by proved unit ;
blastN-firstN        :  ? n ≤ # x → butlastn(n, x) = firstn(# x - n, x) ;
             remarks : proved, used, used by proved unit ;
del-append           :  ? (x + y) -l a = (x -l a) + (y -l a) ;
             remarks : proved, used ;
del-del              :  ? (x -l a) -l a = x -l a ;
            used for : s, ls ;
             remarks : proved ;
del-del1-nodups      :  ? ¬ dups(x) → x -l a = x -1l a ;
             remarks : proved ;
del-del1-switch      :  ? a ≠ b → (x -1l a) -l b = (x -l b) -1l a ;
             remarks : proved ;
del-length           :  ? ¬ # x < # (x -l a) ;
            used for : s, ls ;
             remarks : proved ;
del-n-simp           : a ≠ b ? (((* a)) ' + x) -l ((* b)) = a ' + (x -l b) ;
            used for : s, ls ;
             remarks : proved ;
del-one-simp         : a ≠ b ? ((* a)) ' -l ((* b)) = a ' ;
            used for : s, ls ;
             remarks : proved ;
del-rev              :  ? rev(x) -l a = rev(x -l a) ;
             remarks : proved, used ;
del-rev-01           :  ? rev(x -l a) = rev(x) -l a ;
             remarks : proved ;
del-rmdup            :  ? rmdup(x -l a) = rmdup(x) -l a ;
             remarks : proved, used ;
del-rmdup-01         :  ? rmdup(x) -l a = rmdup(x -l a) ;
             remarks : proved ;
del1-del             :  ? (x -1l a) -l a = x -l a ;
            used for : s, ls ;
             remarks : proved ;
del1-del-switch      :  ? a ≠ b → (x -l a) -1l b = (x -1l b) -l a ;
             remarks : proved ;
del1-empty           :  ? x ≠ [] → (x -1l a = [] ↔ x = a ') ;
            used for : s, ls ;
             remarks : proved ;
del1-first           :  ? x .first = a ∧ x ≠ [] → a ' + (x -1l a) = x ;
             remarks : proved ;
del1-in              :  ? a ≠ b → (a ∈ x -1l b ↔ a ∈ x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
delete-dups          :  ? ¬ dups(x) → ¬ dups(x -l a) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
delete-one-le        :  ? # (x -1l a) ≤ # x ;
             remarks : proved ;
delete-one-nls       :  ? ¬ # x < # (x -1l a) ;
            used for : s, ls ;
             remarks : proved, used ;
delnr-one            :  ? a ' -1l 0 = [] ;
            used for : s, ls ;
             remarks : proved, used ;
delpos-atsizeid      :  ? x -1l # x = x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
delpos-in            :  ? a ∈ x -1l n → (¬ a ∈ x ↔ false) ;
             remarks : proved ;
dups                 :  ? dups(x -1l a) → dups(x) ;
            used for : f, lf ;
             remarks : proved ;
dups-01              :  ? ¬ dups(y) → ¬ b ∈ y -1l b ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
dups-def             :  ? dups(x) ↔ (∃ m, n. m < # x ∧ n < # x ∧ m ≠ n ∧ x[m] = x[n]) ;
             remarks : proved, used, used by proved unit ;
dups-first-last-split :  ? n ≤ # x → (dups(x) ↔ dups(firstn(n, x) + lastn(# x - n, x))) ;
             remarks : proved, used by proved unit ;
elim-firstn-restn    : ? 
                       n ≤ # x → (y = firstn(n, x) ∧ z = restn(n, x) ↔ x = y + z ∧ # y = n) ;
            used for : e ;
             remarks : proved, used by proved unit ;
elim-lastn-butlastn  : ? 
                       n ≤ # x → (y = butlastn(n, x) ∧ z = lastn(n, x) ↔ x = y + z ∧ # z = n) ;
             remarks : proved, used by proved unit ;
extension            :  ? x = y ↔ # x = # y ∧ (∀ n. n < # x → x[n] = y[n]) ;
             remarks : proved, used by proved unit ;
first-all            :  ? firstn(# x, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
first-all-01         :  ? # x = n → firstn(n, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
first-append         :  ? m ≤ # x → firstn(m, x + y) = firstn(m, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
first-append-01      :  ? n + m ≤ # x → firstn(m, restn(n, x) + y) = firstn(m, restn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
first-length         :  ? # firstn(n, x) = n ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
first-mklist         :  ? m ≤ n → firstn(m, mklist(a, n)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved, used ;
first-mklist-01      :  ? m + m0 ≤ n → firstn(m, mklist(a, n)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
first-mklist-02      :  ? firstn(m, mklist(a, m) + mklist(a, n)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
first-mklist-03      :  ? firstn(m, mklist(a, n) + mklist(a, m)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
first-mklist-04      :  ? firstn(m, mklist(a, m)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved, used ;
first-num            : n ≠ 0 ? firstn((* n), x) = x .first ' + firstn(n -1, x .rest) ;
            used for : ls ;
             remarks : proved, used, used by proved unit ;
first-sub            :  ? firstn(n, x) = sublist(0, n, x) ;
             remarks : proved, used by proved unit ;
firstN-dups          :  ? n < # x ∧ ¬ dups(x + y) → ¬ dups(firstn(n, x) + y) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstN-dups-01       :  ? n < # y ∧ ¬ dups(x + y) → ¬ dups(x + firstn(n, y)) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstN-dups-02       :  ? n ≤ # x ∧ ¬ dups(x + y) → ¬ dups(firstn(n, x) + y) ;
            used for : s, ls ;
             remarks : proved, used ;
firstN-dups-03       :  ? n ≤ # y ∧ ¬ dups(x + y) → ¬ dups(x + firstn(n, y)) ;
            used for : s, ls ;
             remarks : proved, used ;
firstN-dups-04       :  ? n ≤ # x ∧ ¬ dups(x) → ¬ dups(firstn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstN-dups-05       :  ? n < # x ∧ ¬ dups(x) → ¬ dups(firstn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstN-empty         :  ? firstn(n, x) = [] ↔ n = 0 ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstN-in            :  ? ¬ a ∈ x ∧ n ≤ # x → ¬ a ∈ firstn(n, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstN-in-01         :  ? ¬ a ∈ x ∧ n < # x → ¬ a ∈ firstn(n, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstN-in-02         :  ? ¬ a ∈ x ∧ n ≤ # x → ¬ a ∈ firstn(# x - n, x) ;
            used for : s, ls ;
             remarks : proved ;
firstN-in-03         :  ? ¬ a ∈ x ∧ n < # x → ¬ a ∈ firstn(# x - n, x) ;
            used for : s, ls ;
             remarks : proved ;
firstN-in-04         :  ? a ∈ firstn(n, x) ∧ n ≤ # x → a ∈ x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
firstN-in-05         :  ? a ∈ firstn(n, x) ∧ n < # x → a ∈ x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
firstN-lastN         :  ? n ≤ # x → firstn(# x - n, x) + lastn(n, x) = x ;
            used for : s, ls ;
             remarks : proved, used ;
firstN-lastN-in      : ? 
                         n ≤ # x ∧ a ∈ x ∧ ¬ a ∈ lastn(n, x)
                       → (¬ a ∈ firstn(# x - n, x) ↔ false) ;
            used for : s, ls ;
             remarks : proved, used ;
firstN-lastN-in-01   : ? 
                         n < # x ∧ a ∈ x ∧ ¬ a ∈ lastn(n, x)
                       → (¬ a ∈ firstn(# x - n, x) ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstN-len           :  ? firstn(# x, x + y) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstN-num-rec       : n ≠ 0 ? firstn((* n), a ' + x) = a ' + firstn(n -1, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstN-rec-01        :  ? n ≠ 0 → firstn(n, a ' + x) = a ' + firstn(n -1, x) ;
             remarks : proved, used, used by proved unit ;
firstn-app           :  ? firstn(# x + n, x + y) = x + firstn(n, y) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstn-app-01        :  ? # x ≤ n → firstn(n, x + y) = x + firstn(n - # x, y) ;
             remarks : proved, used by proved unit ;
firstn-app-02        :  ? m ≤ # x + # y ∧ # x ≤ m → firstn(m, x + y) = x + firstn(m - # x, y) ;
             remarks : proved ;
firstn-app-exact     :  ? n = # x → firstn(n, x + y) = x ;
             remarks : proved, used by proved unit ;
firstn-append        :  ? x = firstn(n, x) + a ' + y → firstn(n + 1, x) = firstn(n, x) + a ' ;
             remarks : proved, used by proved unit ;
firstn-append-01     : ? 
                         x = firstn(# x - 1 + # z, x) + a ' + z
                       → (x ≠ firstn(# x - # z, x) + z ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-at-in-dups    :  ? ¬ dups(x) ∧ n < # x → ¬ x[n] ∈ firstn(n, x) ;
             remarks : proved ;
firstn-butlast       : ? 
                         x = firstn(# x - 1 + # z, x) + a ' + z
                       → firstn(# x - # z, x) .butlast = firstn(# x - 1 + # z, x) ;
            used for : s, ls ;
             remarks : proved ;
firstn-butlast-intro :  ? n < # x → firstn(n, x) = firstn(n, x .butlast) ;
             remarks : proved ;
firstn-first         :  ? n ≠ 0 ∧ x ≠ [] → firstn(n, x) .first = x .first ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstn-firstn        :  ? m ≤ n ∧ n ≤ # x → firstn(m, firstn(n, x)) = firstn(m, x) ;
            used for : s, ls ;
             remarks : proved, used ;
firstn-last          :  ? m ≠ 0 ∧ m ≤ # x → firstn(m, x) .last = x[m -1] ;
             remarks : proved, used by proved unit ;
firstn-last-01       : ? 
                         x = firstn(# x - 1 + # z, x) + a ' + z
                       → firstn(# x - # z, x) .last = a ;
            used for : s, ls ;
             remarks : proved ;
firstn-last-eq       :  ? n ≤ # x → firstn(n, x) + lastn(# x - n, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstn-last-rec      :  ? n ≠ 0 ∧ n ≤ # x → firstn(n, x) = firstn(n -1, x) + x[n -1] ;
             remarks : proved, used by proved unit ;
firstn-length        :  ? x = firstn(n, y) + a ' + z → (¬ # x ≥ n + 1 ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-length-01     :  ? x = firstn(n, x) + a ' + z → (¬ # x > # z ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-length-02     :  ? x = firstn(# x - 1 + # z, x) + a ' + z → (¬ # x - # z ≠ 0 ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-length-03     :  ? n < # x → # firstn(n, x) = n ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstn-length-04     :  ? n ≤ # x → # firstn(n, x) = n ;
            used for : s, ls ;
             remarks : proved, used ;
firstn-one           :  ? firstn(1, a ' + x) = a ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstn-one-01        :  ? x ≠ [] → firstn(1, x) = x .first ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstn-prefix        :  ? n ≤ # x → (¬ firstn(n, x) ? x ↔ false) ;
            used for : s, ls ;
             remarks : proved, used ;
firstn-prefix-01     :  ? x = firstn(n, x) + z → (¬ firstn(n, x) ? x ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-prefix-02     :  ? # x = n0 + # z ∧ z ? x → (¬ firstn(n0, x) ? x ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-prefix-03     :  ? # x = (1 + # z) + n0 ∧ a ' + z ? x → (¬ firstn(n0, x) ? x ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-prefix-04     :  ? # x = (1 + # z) + n0 → (¬ firstn(1 + n0, x) ? x ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
firstn-restn         :  ? firstn(m, restn(n, x)) = sublist(n, m, x) ;
             remarks : proved, used by proved unit ;
firstn-restn-01      :  ? firstn(m, restn(n, x)) = sublist(n, m, x) ;
             remarks : proved ;
firstn-restn-eq      :  ? n ≤ # x → firstn(n, x) + restn(n, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
firstn-restn-in      :  ? n ≤ # x → (a ∈ x ↔ a ∈ firstn(n, x) ∨ a ∈ restn(n, x)) ;
             remarks : proved ;
firstn-twice         :  ? n ≤ # x → firstn(n, firstn(n, x)) = firstn(n, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstn-two           :  ? firstn(2, a ' + b ') = a ' + b ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
firstrestex          :  ? n < # x ↔ x = firstn(n, x) + restn(n, x) ∧ n < # x ;
             remarks : proved, used, used by proved unit ;
from-notin           :  ? ¬ a ∈ x → frome(x, a) = [] ;
            used for : s, ls ;
             remarks : proved ;
from-rest            :  ? a ∈ x → frome(x, a) = restn(pos(a, x), x) ;
             remarks : proved ;
get                  :  ? a ∈ x → x[pos(a, x)] = a ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-add-num          : n ≠ 0 ? (a ' + x)[m + ((* n))] = x[m + (n - 1)] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-app              :  ? (x + a ' + y)[# x] = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-append-grt       :  ? ¬ n < # x → (x + y)[n] = y[n - # x] ;
            used for : s ;
             remarks : proved, used, used by proved unit ;
get-append-grt-02    :  ? (x + y)[n + # x] = y[n] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-append-less      :  ? n < # x → (x + y)[n] = x[n] ;
            used for : s ;
             remarks : proved, used, used by proved unit ;
get-butlast          :  ? n < # x → (x + a ')[n] = x[n] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-firstn           :  ? n < m ∧ m ≤ # x → (firstn(m, x)[n]) = x[n] ;
            used for : s ;
             remarks : proved, used, used by proved unit ;
get-in               :  ? m < # x → (¬ x[m] ∈ x ↔ false) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-last             :  ? n = # x → (x + a ')[n] = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-last-01          :  ? (a + x)[# x] = (a + x) .last ;
             remarks : proved ;
get-last-03          :  ? (x + a ')[# x] = a ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-last-04          :  ? (a ' + x + y)[# x] = (a ' + x) .last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
get-last-nonempty    :  ? n = # x - 1 ∧ 0 < # x → x[n] = x .last ;
             remarks : proved, used by proved unit ;
get-last2            :  ? (a ' + x)[# x] = (a ' + x) .last ;
             remarks : proved, used, used by proved unit ;
get-mklist           :  ? (a ' + mklist(a, m))[m] = a ;
            used for : s, ls ;
             remarks : proved ;
get-mklist-01        :  ? m < n → (mklist(a, n)[m]) = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-nodups           :  ? m < # x ∧ n < # x ∧ ¬ dups(x) → (x[m] = x[n] ↔ m = n) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-numrec           : n ≠ 0 ? (a ' + x)[(* n)] = x[n -1] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
get-rec              :  ? x ≠ [] ∧ n ≠ 0 → x[n] = (x .rest)[n - 1] ;
             remarks : proved, used, used by proved unit ;
get-rec-01           :  ? x ≠ [] → x[n + 1] = (x .rest)[n] ;
            used for : ls ;
             remarks : proved, used, used by proved unit ;
get-restn            :  ? m + n < # x → (restn(n, x)[m]) = x[m + n] ;
             remarks : proved, used, used by proved unit ;
get-zero             :  ? x ≠ [] → x[0] = x .first ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
in                   :  ? a ∈ x ∧ a ≠ b → a ∈ x -l b ;
             remarks : proved, used, used by proved unit ;
in-01                :  ? a ∈ x -l b → a ∈ x ∧ a ≠ b ;
             remarks : proved, used, used by proved unit ;
in-01-01             :  ? a ∈ x -1l b → a ∈ x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
in-02                :  ? ¬ a ∈ x -l a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
in-02-01             :  ? ¬ a ∈ x → x -1l a = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
in-03                :  ? ¬ a ∈ x → x -l a = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
in-04                :  ? a ∈ x ∧ a ≠ b → a ∈ x -1l b ;
            used for : s, ls ;
             remarks : proved, used ;
in-05                :  ? ¬ a ∈ y -1l b ∧ a ∈ y → a = b ;
            used for : f, lf ;
             remarks : proved, used by proved unit ;
in-del               :  ? a ∈ x → (a ∈ x -l b ↔ a ≠ b) ;
             remarks : proved, used by proved unit ;
in-del-new           :  ? a ∈ x -l b ↔ a ∈ x ∧ a ≠ b ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
in-get               :  ? a ∈ x ↔ (∃ n. n < # x ∧ x[n] = a) ;
             remarks : proved, used, used by proved unit ;
inl                  :  ? a ∈ x → pos(a, x) < # x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
inl-01               :  ? a ∈ x → ¬ # x ≤ pos(a, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
l                    :  ? a ∈ x → # (x -1l a) = (# x) -1 ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
l-01                 :  ? # x = # (x -1l a) ↔ ¬ a ∈ x ;
            used for : s, ls ;
             remarks : proved ;
l-02                 :  ? # x + # y = # (y -1l a) ↔ x = [] ∧ ¬ a ∈ y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastN-all            :  ? n = # x → lastn(n, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastN-append         :  ? n = # y → lastn(n, x + y) = y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastN-append-01      :  ? n ≤ # y → lastn(n, x + y) = lastn(n, y) ;
            used for : s, ls ;
             remarks : proved, used ;
lastN-blastN         :  ? n ≤ # x → butlastn(n, x) + lastn(n, x) = x ;
            used for : s, ls ;
             remarks : proved, used ;
lastN-dups           :  ? ¬ dups(x) ∧ n < # x → ¬ dups(lastn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used ;
lastN-dups-01        :  ? ¬ dups(x) ∧ n ≤ # x → ¬ dups(lastn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastN-empty          :  ? lastn(n, x) = [] ↔ n = 0 ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastN-ex             : n ≤ # x ? ∃ y. x = y + lastn(n, x) ∧ # y = # x - n ;
             remarks : proved ;
lastN-in             :  ? ¬ a ∈ x ∧ n < # x → ¬ a ∈ lastn(n, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastN-in-01          :  ? ¬ a ∈ x ∧ n ≤ # x → ¬ a ∈ lastn(n, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastN-rec-01         :  ? lastn(n + 1, x + a ') = lastn(n, x) + a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastN-rec-02         :  ? n < # x → lastn(n, x) = lastn(n, x .rest) ;
             remarks : proved, used, used by proved unit ;
lastN-rest           :  ? n < # x → lastn(n, x .rest) = lastn(n, x) ;
            used for : s ;
             remarks : proved, used ;
lastN-rest-01        :  ? # x = n + 1 → lastn(n, x) = x .rest ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastn-app            :  ? # y ≤ n → lastn(n, x + y) = lastn(n - # y, x) + y ;
             remarks : proved ;
lastn-firstn-in      : ? 
                       lastn(n, x) = y ∧ ¬ a ∈ y ∧ a ∈ x ∧ n ≤ # x → a ∈ firstn(# x - n, x) ;
             remarks : proved ;
lastn-firstn-in-01   : ? 
                         lastn(n, x) = y ∧ ¬ a ∈ y ∧ a ∈ x ∧ n ≤ # x ∧ m = # x - n
                       → a ∈ firstn(m, x) ;
             remarks : proved, used by proved unit ;
lastn-lastn          :  ? lastn(n, lastn(n, x)) = lastn(n, x) ;
            used for : s, ls ;
             remarks : proved ;
lastn-lastn-01       :  ? m ≤ n → lastn(m, lastn(n, x)) = lastn(m, x) ;
            used for : s, ls ;
             remarks : proved ;
lastn-length         :  ? # lastn(n, x) = n ;
            used for : s, ls ;
             remarks : proved, used ;
lastn-length-01      :  ? n ≤ # x → # lastn(n, x) = n ;
            used for : s, ls ;
             remarks : proved, used ;
lastn-mklist         :  ? m ≤ n → lastn(m, mklist(a, n)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
lastn-mklist-01      :  ? lastn(n, x + mklist(a, n)) = mklist(a, n) ;
            used for : s, ls ;
             remarks : proved ;
lastn-mklist-02      :  ? lastn(n + 1, x + b ' + mklist(a, n)) = b ' + mklist(a, n) ;
            used for : s, ls ;
             remarks : proved ;
lastn-mklist-03      :  ? lastn(n, mklist(a, n)) = mklist(a, n) ;
            used for : s, ls ;
             remarks : proved, used ;
lastn-neq            :  ? n ≤ # x ∧ ¬ a ∈ x → lastn(n, x) ≠ a ' + y ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastn-neq-01         :  ? n ≤ # x ∧ a ∈ y ∧ ¬ a ∈ x → lastn(n, x) ≠ b ' + y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastn-neq-02         :  ? # y ≠ n → lastn(n + 1, x) ≠ a ' + y ;
            used for : s, ls ;
             remarks : proved ;
lastn-neq-04         :  ? n ≤ # x ∧ b ∈ y ∧ ¬ b ∈ x → lastn(n, x) ≠ a ' + y ;
            used for : s, ls ;
             remarks : proved ;
lastn-one            :  ? lastn(1, x) = x .last ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
lastn-one-01         :  ? lastn(1, a ') = a ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
lastn-rec            :  ? n ≠ 0 → lastn(n, x) = lastn(n -1, x .butlast) + x .last ;
             remarks : proved, used ;
lastn-restn          :  ? m + n ≤ # x → lastn(m, restn(n, x)) = lastn(m, x) ;
            used for : s, ls ;
             remarks : proved ;
lastn-restn-01       : n ≤ # x ? lastn(n, x) = restn(# x - n, x) ;
             remarks : proved, used, used by proved unit ;
len                  :  ? pos(a, x) ≤ # x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
len-01               :  ? ¬ # x < pos(a, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
list-select-not-first :  ? x = a ' + x0 → x[m + 1] = x0[m] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
nodups-rmposnodups   :  ? ¬ dups(x) → (dups(x -1l n) ↔ false) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
notin-03             :  ? ¬ a ∈ x → pos(a, x) = # x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
num-lastN            : 0 < n ? lastn((* n), x + a ') = lastn(n -1, x) + a ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
one                  :  ? a ' -l a = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
one-01               :  ? a ' -1l a = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
one-01-01            :  ? a ≠ b → a ' -1l b = a ' ;
            used for : s, ls ;
             remarks : proved ;
one-03               :  ? (a ')[0] = a ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
pos-equal            :  ? a ∈ x ∧ pos(a, x) = n → (pos(b, x) = n ↔ a = b) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
pos-get              :  ? ¬ dups(x) ∧ n < # x → pos(x[n], x) = n ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
pos-one              :  ? pos(a, a ') = 0 ;
            used for : s, ls ;
             remarks : proved ;
possize-notin        :  ? pos(a, x) = # x ↔ ¬ a ∈ x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
put-app-left         :  ? n < # x → (x + y)[n, a] = x[n, a] + y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
put-app-right        :  ? # x ≤ n → (x + y)[n, a] = x + y[n - # x, a] ;
             remarks : proved, used, used by proved unit ;
put-at               : m < # x ? m ≠ n → (x[m, a][n]) = x[n] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
put-at-eq            : m < # x ? (x[m, a][m]) = a ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
put-butlast          :  ? n < # x → (x + a ')[n, b] = x[n, b] + a ' ;
            used for : s, ls ;
             remarks : proved ;
put-del1-in          :  ? x[m] ≠ a ∧ m < # x → (a ∈ x[m, a] -1l a ↔ a ∈ x) ;
            used for : s, ls ;
             remarks : proved ;
put-in               :  ? a ≠ x[m] ∧ m < # x → (a ∈ x[m, b] ↔ a = b ∨ a ∈ x) ;
            used for : s, ls ;
             remarks : proved, used ;
put-in-01            :  ? m < # x → (a ∈ x[m, b] ↔ a = b ∨ a ∈ x -1l x[m]) ;
             remarks : proved ;
put-in-02            :  ? m < # x → a ∈ x[m, a] ;
            used for : s, ls ;
             remarks : proved, used ;
put-last             :  ? n = # x → (x + a ')[n, b] = x + b ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
put-length           :  ? n < # x → # (x[n, a]) = # x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
put-one              :  ? (a ')[0, b] = b ' ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
put-one-01           :  ? (a ' + b ')[1, a0] = a ' + a0 ' ;
            used for : s, ls ;
             remarks : proved ;
put-rec              :  ? n ≠ 0 ∧ x ≠ [] → x[n, a] = x .first ' + (x .rest)[n -1, a] ;
             remarks : proved, used, used by proved unit ;
;; nochmal dasselbe wie put-rec????             
;;put-rec-01           :  ? n ≠ 0 ∧ x ≠ [] → x[n, a] = x .first ' + (x .rest)[n -1, a] ;
;;             remarks : proved ;
put-rec-02           :  ? n ≠ 0 → (a ' + x)[n, b] = a ' + x[n -1, b] ;
             remarks : proved, used ;
put-same             :  ? x[m] = a ∧ m < # x → x[m, a] = x ;
            used for : s, ls ;
             remarks : proved ;
put-sw-in            :  ? m < # x ∧ n < # x → (a ∈ (x[m, x[n]][n, x[m]]) ↔ a ∈ x) ;
            used for : s, ls ;
             remarks : proved ;
put-zero-01          :  ? x ≠ [] → x[0, a] = a ' + x .rest ;
             remarks : proved, used by proved unit ;
putset-same          :  ? n < # x → x[n, x[n]] = x ;
            used for : s, ls ;
             remarks : proved, used ;
rest-app             :  ? m ≤ # x + # y ∧ # x ≤ m → restn(m, x + y) = restn(m - # x, y) ;
             remarks : proved, used by proved unit ;
rest-append          :  ? n + m ≤ # x → restn(n, x + y) = restn(n, x) + y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rest-empty           :  ? # x = n → restn(n, x) = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rest-in              :  ? a ∈ restn(n, x) ∧ n ≤ # x → a ∈ x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
rest-in-01           :  ? a ∈ restn(n, x) ∧ ¬ a ∈ x → ¬ n ≤ # x ;
            used for : f, lf ;
             remarks : proved, used, used by proved unit ;
rest-len             : n ≤ # x ? # restn(n, x) = # x - n ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rest-mklist          :  ? m ≤ n → restn(m, mklist(a, n)) = mklist(a, n - m) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rest-mklist-01       :  ? m + m0 ≤ n → restn(m, mklist(a, n)) = mklist(a, n - m) ;
            used for : s, ls ;
             remarks : proved, used ;
rest-mklist-02       :  ? restn(m, mklist(a, m) + mklist(a, n)) = mklist(a, n) ;
            used for : s, ls ;
             remarks : proved, used ;
rest-mklist-03       :  ? restn(m, mklist(a, n) + mklist(a, m)) = mklist(a, n) ;
            used for : s, ls ;
             remarks : proved, used ;
rest-mklist-04       :  ? restn(m, mklist(a, m)) = [] ;
            used for : s, ls ;
             remarks : proved, used ;
rest-one             :  ? restn(1, a ' + x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
rest-one-01          :  ? restn(1, a ') = [] ;
            used for : s, ls ;
             remarks : proved, used ;
rest-rec             :  ? 0 < n → restn(n, x) = restn(n -1, x .rest) ;
             remarks : proved, used, used by proved unit ;
rest-rest1           :  ? x .rest = restn(1, x) ;
             remarks : proved, used, used by proved unit ;
rest-sub             :  ? n ≤ # x → restn(n, x) = sublist(n, # x - n, x) ;
             remarks : proved, used by proved unit ;
rest-two             :  ? restn(2, a ' + b ' + x) = x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rest-two-01          :  ? restn(2, a ' + b ') = [] ;
            used for : s, ls ;
             remarks : proved ;
restN-all            :  ? restn(# x, x) = [] ;
            used for : s, ls ;
             remarks : proved, used ;
restN-append         :  ? n ≤ # x → restn(n, x + y) = restn(n, x) + y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
restN-dups           :  ? ¬ dups(x) ∧ n ≤ # x → ¬ dups(restn(n, x)) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
restN-len            :  ? restn(# x, x + y) = y ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
restn-apprec         :  ? restn(m, restn(n, x)) = restn(m + n, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
restn-at             :  ? m + n < # x → (restn(m, x)[n]) = x[m + n] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
restn-empty          :  ? n ≤ # x → (restn(n, x) = [] ↔ n = # x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
restn-first-get      :  ? n < # x → restn(n, x) .first = x[n] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
restn-firstn         : ? 
                         m ≤ n ∧ m + n ≤ # x
                       → restn(m, firstn(n, x)) = firstn(n - m, restn(m, x)) ;
             remarks : proved ;
restn-firstn-better  : ? 
                       m ≤ n ∧ n ≤ # x → restn(m, firstn(n, x)) = firstn(n - m, restn(m, x)) ;
            used for : s, ls ;
             remarks : proved, used ;
restn-last           :  ? n < # x → restn(n, x) .last = x .last ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
restn-less           :  ? n < # x → restn(n, x) = x[n] + restn(n +1, x) ;
             remarks : proved, used by proved unit ;
restn-nonempty       :  ? n < # x → restn(n, a ' + x) ≠ [] ;
            used for : s ;
             remarks : proved ;
restn-nonempty-2     :  ? n < # x → restn(n, x) ≠ [] ;
            used for : s ;
             remarks : proved ;
restn-prefix         :  ? # x = n → restn(n, x + x0) = x0 ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
restn-rest           :  ? restn(n, x) .rest = restn(n + 1, x) ;
             remarks : proved, used by proved unit ;
restn-restn          :  ? m + n ≤ # x → restn(m, restn(n, x)) = restn(m + n, x) ;
            used for : s, ls ;
             remarks : proved ;
restn-size-last      :  ? restn(# x, a ' + x) = (a ' + x) .last ' ;
            used for : s ;
             remarks : proved ;
rmdup-del1-del       :  ? rmdup(x) -1l a = rmdup(x -l a) ;
             remarks : proved ;
rmdup-last           :  ? rmdup(x + a ') = rmdup(x -l a) + a ' ;
             remarks : proved ;
rmpos-get            :  ? n + 1 < # x ∧ m < # x → (x -1l m)[n] = ((n < m ⊃ x[n]; x[n + 1])) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rmpos-in             :  ? ¬ dups(x) ∧ n < # x → (a ∈ x -1l n ↔ a ≠ x[n] ∧ a ∈ x) ;
            used for : s, ls ;
             remarks : proved, used ;
rmpos-size           :  ? n < # x → # (x -1l n) = # x - 1 ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
rmtoobigpos          :  ? # x ≤ n → x -1l n = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
size-del-nodups      :  ? ¬ dups(x) ∧ a ∈ x → # (x -l a) = # x - 1 ;
            used for : s, ls ;
             remarks : proved ;
size-rmdup-del       :  ? a ∈ x → # rmdup(x -l a) = # rmdup(x) - 1 ;
             remarks : proved ;
st                   :  ? (x -1l a) -1l b = (x -1l b) -1l a ↔ true ;
            used for : s, ls ;
             remarks : proved ;
sub-len              :  ? n ≤ # x → # sublist(0, n, x) = n ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sub-len-01           :  ? n ≤ # x → # sublist(0, n, x + y) = n ;
            used for : s, ls ;
             remarks : proved ;
sub-rec              :  ? sublist(m + 1, n, x) = sublist(m, n, x .rest) ;
             remarks : proved, used, used by proved unit ;
sub-rec-01           : m + n < # x ? sublist(m + 1, n, x) = sublist(m, n, x .rest) ;
            used for : ls ;
             remarks : proved, used, used by proved unit ;
sub-zero             :  ? sublist(0, # x, x) = x ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sub-zerolen          :  ? sublist(n, 0, x) = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sub-zerolen-01       :  ? sublist(# x, 0, x) = [] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sub-zerolen-02       :  ? n ≤ # x → sublist(n, 0, x) = [] ;
            used for : s, ls ;
             remarks : proved ;
sub-zerorec          :  ? x ≠ [] → sublist(0, n + 1, x) = x .first + sublist(0, n, x .rest) ;
            used for : ls ;
             remarks : proved, used by proved unit ;
sub-zerorec-01       : n < # x ? sublist(0, n + 1, x) = x .first + sublist(0, n, x .rest) ;
            used for : ls ;
             remarks : proved, used ;
sub-zerozero         :  ? sublist(0, 0, x) = [] ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sublist-all          :  ? # x = n → sublist(0, n, x) = x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-append       :  ? n + m ≤ # x → sublist(n, m, x + y) = sublist(n, m, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sublist-append-01    :  ? # x ≤ n → sublist(n, m, x + y) = sublist(n - # x, m, y) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sublist-append-01-01 : ? 
                         # x ≤ n ∧ n + m ≤ # x + # y
                       → sublist(n, m, x + y) = sublist(n - # x, m, y) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-append-02    :  ? # x ≤ m → sublist(0, m, x + y) = x + sublist(0, m - # x, y) ;
            used for : s, ls ;
             remarks : proved, used ;
sublist-append-02-01 : ? 
                         # x ≤ m ∧ m ≤ # x + # y
                       → sublist(0, m, x + y) = x + sublist(0, m - # x, y) ;
            used for : s, ls ;
             remarks : proved ;
sublist-append-03    :  ? sublist(0, # x, x + y) = x ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-append-04    : ? 
                         n + n0 + n1 ≤ # x
                       → sublist(n, n0, x) + sublist(n + n0, n1, x) = sublist(n, n0 + n1, x) ;
            used for : s, ls ;
             remarks : proved ;
sublist-at           :  ? n0 < n ∧ m + n ≤ # x → (sublist(m, n, x)[n0]) = x[m + n0] ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-empty        :  ? sublist(0, n, x) = [] ↔ n = 0 ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-first-skip   : ? 
                         n2 ≤ # x ∧ n + n1 ≤ n2
                       → sublist(n, n1, firstn(n2, x)) = sublist(n, n1, x) ;
            used for : s, ls ;
             remarks : proved, used, used by proved unit ;
sublist-firsteq      : ? 
                         sublist(0, n, x) = a ' + y
                       ↔ n = # y + 1 ∧ x .first = a ∧ sublist(0, n -1, x .rest) = y ;
             remarks : proved ;
sublist-good         :  ? sublist(# x, # y, x + y + z) = y ;
             comment :  this can be used as an axiom.
However, it makes the operation defined only if the indices are good which is bad. ;
             remarks : proved ;
sublist-last         :  ? m0 + n < # x → sublist(m0, n + 1, x) .last = x[m0 + n] ;
             remarks : proved ;
sublist-length       :  ? m + n ≤ # x → # sublist(m, n, x) = n ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-length-01    :  ? # x0 = n2 + n0 → # sublist(0, n0, x0) = n0 ;
            used for : s, ls ;
             remarks : proved ;
sublist-lenrec       :  ? m + n < # x → sublist(m, n + 1, x) = sublist(m, n, x) + x[m + n] ;
             remarks : proved, used by proved unit ;
sublist-lenrec-01    :  ? n < # x → sublist(0, n + 1, x) = sublist(0, n, x) + x[n] ;
             remarks : proved, used ;
sublist-mklist       :  ? n + m ≤ m0 → sublist(n, m, mklist(a, m0)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved, used ;
sublist-mklist-01    :  ? n + m ≤ m0 → sublist(n, m, mklist(a, m0) + x) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
sublist-mklist-02    :  ? m ≤ m0 → sublist(0, m, mklist(a, m0)) = mklist(a, m) ;
            used for : s, ls ;
             remarks : proved ;
sublist-move         : ? 
                         n + m ≤ m0 ∧ n0 + m0 ≤ # x
                       → sublist(n, m, sublist(n0, m0, x)) = sublist(n0 + n, m, x) ;
            used for : s, ls ;
             remarks : proved ;
sublist-not-empty    :  ? m0 + n2 < # x → (¬ sublist(m0, n2 + 1, x) ≠ [] ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
sublist-not-empty-01 :  ? n0 ≠ 0 → (¬ sublist(m0, n0, x) ≠ [] ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
sublist-not-empty-02 :  ? ¬ sublist(n0, 1, x) ≠ [] ↔ false ;
            used for : s, ls ;
             remarks : proved ;
sublist-num          :  ? sublist((* m), (* n), x) = firstn(n, restn(m, x)) ;
            used for : ls ;
             remarks : proved, used, used by proved unit ;
sublist-num-01       : n ≠ 0 ? sublist(0, (* n), a ' + x) = a ' + sublist(0, n -1, x) ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-one          :  ? m < # x → sublist(m, 1, x) = x[m] ' ;
            used for : s, ls ;
             remarks : proved, used by proved unit ;
sublist-one-01       :  ? sublist(0, 1, a ') = a ' ;
            used for : s, ls ;
             remarks : proved ;
sublist-part         :  ? # x = n0 + m0 → firstn(m0, x) + firstn(n0, restn(m0, x)) = x ;
            used for : s, ls ;
             remarks : proved ;
sublist-prefix       : ? 
                         n ≤ n1 ∧ n1 + m0 < # x
                       → (¬ sublist(m0, n + 1, x) ? sublist(m0, n1 + 1, x) ↔ false) ;
            used for : s, ls ;
             remarks : proved ;
sublist-rec          : ? 
                         x ≠ [] ∧ n ≠ 0
                       → sublist(0, n, x) = x .first ' + sublist(0, n -1, x .rest) ;
             remarks : proved ;
sublist-rec-01       : n ≤ # x, n ≠ 0
                       ? 
                       sublist(0, n, x) = x .first ' + sublist(0, n -1, x .rest) ;
             remarks : proved ;
sublist-restn        : ? 
                       m + n + m0 < # x → sublist(m, n, restn(m0, x)) = sublist(m + m0, n, x) ;
            used for : s, ls ;
             remarks : proved ;
sublist-restn-01     : ? 
                       m + n + m0 ≤ # x → sublist(m, n, restn(m0, x)) = sublist(m + m0, n, x) ;
            used for : s, ls ;
             remarks : proved ;
sublist-restn-02     :  ? n + m = # x → sublist(n, m, x) = restn(n, x) ;
             remarks : proved ;
sublist-two-num      : m1 ≤ # x, n + n1 ≤ m1
                       ? 
                       sublist((* n), (* n1), sublist(0, (* m1), x)) = sublist(n, n1, x) ;
            used for : ls ;
             remarks : proved, used by proved unit ;
sw                   :  ? (x -l a) -l b = (x -l b) -l a ;
             remarks : proved, used ;
sw-01                :  ? (x -l a) -l b = (x -l b) -l a ↔ true ;
            used for : s, ls ;
             remarks : proved ;
sw-02                :  ? (x -1l a) -1l b = (x -1l b) -1l a ;
             remarks : proved, used, used by proved unit ;
weak-firstN-rec      :  ? firstn(n + 1, a ' + x) = a + firstn(n, x) ;
            used for : s ;
             remarks : proved, used by proved unit ;
weak-restN-rec       :  ? restn(n + 1, a ' + x) = restn(n, x) ;
            used for : s ;
             remarks : proved, used by proved unit ;


;;; END

